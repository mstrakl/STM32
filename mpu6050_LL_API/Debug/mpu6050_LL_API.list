
mpu6050_LL_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002464  08002464  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002464  08002464  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002464  08002464  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002468  08002468  00012468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800246c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  08002470  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08002470  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004403  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001225  00000000  00000000  00024430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00025658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00025c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c1c  00000000  00000000  00026210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c6a  00000000  00000000  00037e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bacc  00000000  00000000  0003ca96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00098562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001930  00000000  00000000  000985b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800242c 	.word	0x0800242c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800242c 	.word	0x0800242c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4906      	ldr	r1, [pc, #24]	; (80009d8 <__NVIC_EnableIRQ+0x34>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff ffe3 	bl	8000a94 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ace:	f7ff ff5b 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffa9 	bl	8000a30 <NVIC_EncodePriority>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2010      	movs	r0, #16
 8000ae4:	f7ff ff7a 	bl	80009dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ae8:	2010      	movs	r0, #16
 8000aea:	f7ff ff5b 	bl	80009a4 <__NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000afe:	699a      	ldr	r2, [r3, #24]
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f7ff ffe3 	bl	8000af4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000b2e:	2004      	movs	r0, #4
 8000b30:	f7ff ffe0 	bl	8000af4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000b34:	2008      	movs	r0, #8
 8000b36:	f7ff ffdd 	bl	8000af4 <LL_APB2_GRP1_EnableClock>

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <__NVIC_GetPriorityGrouping>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <__NVIC_EnableIRQ+0x34>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <LL_DMA_SetDataTransferDirection+0x44>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	461a      	mov	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c6c:	f023 0310 	bic.w	r3, r3, #16
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	3a01      	subs	r2, #1
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <LL_DMA_SetDataTransferDirection+0x44>)
 8000c76:	5c8a      	ldrb	r2, [r1, r2]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	440a      	add	r2, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	08002444 	.word	0x08002444

08000c94 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LL_DMA_SetMode+0x40>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 0220 	bic.w	r2, r3, #32
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <LL_DMA_SetMode+0x40>)
 8000cba:	5ccb      	ldrb	r3, [r1, r3]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	440b      	add	r3, r1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	08002444 	.word	0x08002444

08000cd8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LL_DMA_SetPeriphIncMode+0x40>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4906      	ldr	r1, [pc, #24]	; (8000d18 <LL_DMA_SetPeriphIncMode+0x40>)
 8000cfe:	5ccb      	ldrb	r3, [r1, r3]
 8000d00:	4619      	mov	r1, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	440b      	add	r3, r1
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	08002444 	.word	0x08002444

08000d1c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LL_DMA_SetMemoryIncMode+0x40>)
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	461a      	mov	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <LL_DMA_SetMemoryIncMode+0x40>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	4619      	mov	r1, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	440b      	add	r3, r1
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	08002444 	.word	0x08002444

08000d60 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LL_DMA_SetPeriphSize+0x40>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	461a      	mov	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <LL_DMA_SetPeriphSize+0x40>)
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	08002444 	.word	0x08002444

08000da4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LL_DMA_SetMemorySize+0x40>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	4906      	ldr	r1, [pc, #24]	; (8000de4 <LL_DMA_SetMemorySize+0x40>)
 8000dca:	5ccb      	ldrb	r3, [r1, r3]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	440b      	add	r3, r1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	08002444 	.word	0x08002444

08000de8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4413      	add	r3, r2
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	4906      	ldr	r1, [pc, #24]	; (8000e28 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000e0e:	5ccb      	ldrb	r3, [r1, r3]
 8000e10:	4619      	mov	r1, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	440b      	add	r3, r1
 8000e16:	4619      	mov	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	08002444 	.word	0x08002444

08000e2c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <LL_DMA_SetPeriphAddress+0x2c>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	461a      	mov	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6093      	str	r3, [r2, #8]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	08002444 	.word	0x08002444

08000e5c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <LL_I2C_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_I2C_DMA_GetRegAddr
  * @param  I2Cx I2C Instance.
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return (uint32_t) & (I2Cx->DR);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3310      	adds	r3, #16
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60da      	str	r2, [r3, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f023 0201 	bic.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	605a      	str	r2, [r3, #4]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	2b80      	cmp	r3, #128	; 0x80
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	2300      	movne	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	bf0c      	ite	eq
 8000fca:	2301      	moveq	r3, #1
 8000fcc:	2300      	movne	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800100c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <LL_I2C_EnableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_EnableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableBitPOS(I2C_TypeDef *I2Cx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	611a      	str	r2, [r3, #16]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <LL_APB1_GRP1_EnableClock>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <LL_APB2_GRP1_EnableClock>:
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <LL_APB2_GRP1_EnableClock+0x2c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4013      	ands	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001182:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001186:	f7ff ffb9 	bl	80010fc <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800118a:	2008      	movs	r0, #8
 800118c:	f7ff ffce 	bl	800112c <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001190:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001196:	2309      	movs	r3, #9
 8001198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800119e:	2304      	movs	r3, #4
 80011a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	483e      	ldr	r0, [pc, #248]	; (80012a0 <MX_I2C1_Init+0x144>)
 80011a8:	f000 fe29 	bl	8001dfe <LL_GPIO_Init>

  /* I2C1 DMA Init */

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80011ac:	2210      	movs	r2, #16
 80011ae:	2106      	movs	r1, #6
 80011b0:	483c      	ldr	r0, [pc, #240]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011b2:	f7ff fd4b 	bl	8000c4c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2106      	movs	r1, #6
 80011ba:	483a      	ldr	r0, [pc, #232]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011bc:	f7ff fe14 	bl	8000de8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2106      	movs	r1, #6
 80011c4:	4837      	ldr	r0, [pc, #220]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011c6:	f7ff fd65 	bl	8000c94 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2106      	movs	r1, #6
 80011ce:	4835      	ldr	r0, [pc, #212]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011d0:	f7ff fd82 	bl	8000cd8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	2106      	movs	r1, #6
 80011d8:	4832      	ldr	r0, [pc, #200]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011da:	f7ff fd9f 	bl	8000d1c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80011de:	2200      	movs	r2, #0
 80011e0:	2106      	movs	r1, #6
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011e4:	f7ff fdbc 	bl	8000d60 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2106      	movs	r1, #6
 80011ec:	482d      	ldr	r0, [pc, #180]	; (80012a4 <MX_I2C1_Init+0x148>)
 80011ee:	f7ff fdd9 	bl	8000da4 <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011f2:	f7ff fca5 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fcf3 	bl	8000be8 <NVIC_EncodePriority>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	201f      	movs	r0, #31
 8001208:	f7ff fcc4 	bl	8000b94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800120c:	201f      	movs	r0, #31
 800120e:	f7ff fca5 	bl	8000b5c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001212:	f7ff fc95 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8001216:	4603      	mov	r3, r0
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fce3 	bl	8000be8 <NVIC_EncodePriority>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	2020      	movs	r0, #32
 8001228:	f7ff fcb4 	bl	8000b94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 800122c:	2020      	movs	r0, #32
 800122e:	f7ff fc95 	bl	8000b5c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_6, LL_I2C_DMA_GetRegAddr(I2C1));
 8001232:	481d      	ldr	r0, [pc, #116]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001234:	f7ff fe21 	bl	8000e7a <LL_I2C_DMA_GetRegAddr>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	2106      	movs	r1, #6
 800123e:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_I2C1_Init+0x148>)
 8001240:	f7ff fdf4 	bl	8000e2c <LL_DMA_SetPeriphAddress>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001246:	f7ff fe53 	bl	8000ef0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800124a:	4817      	ldr	r0, [pc, #92]	; (80012a8 <MX_I2C1_Init+0x14c>)
 800124c:	f7ff fe2f 	bl	8000eae <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001250:	4815      	ldr	r0, [pc, #84]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001252:	f7ff fe1d 	bl	8000e90 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C1_Init+0x150>)
 800125c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800126c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	4619      	mov	r1, r3
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_I2C1_Init+0x14c>)
 800127a:	f000 ff15 	bl	80020a8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001282:	f7ff fe23 	bl	8000ecc <LL_I2C_SetOwnAddress2>
  // Any of these Buffer events will generate interrupt.
  // ! ONLY if event interrupts are enabled too !
  // 
  // Receive buffer not empty (RXNE)
  // Transmit buffer empty (TXE)
  LL_I2C_EnableIT_BUF(I2C1);
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001288:	f7ff fe50 	bl	8000f2c <LL_I2C_EnableIT_BUF>
  // Start Bit (SB)
  // Address sent, Address matched (ADDR)
  // 10-bit header sent (ADD10)
  // Stop detection  (STOPF)
  // Byte transfer finished (BTF)
  LL_I2C_EnableIT_EVT(I2C1);
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x14c>)
 800128e:	f7ff fe3e 	bl	8000f0e <LL_I2C_EnableIT_EVT>
  // SMBus Alert pin event detection (SMBALERT)
  //LL_I2C_EnableIT_ERR(I2C1);

  //LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);

  LL_I2C_Enable(I2C1);
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_I2C1_Init+0x14c>)
 8001294:	f7ff fde2 	bl	8000e5c <LL_I2C_Enable>


  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <I2C_SendRequest>:




void I2C_SendRequest( const uint8_t devAddr, const uint8_t memAddr, uint8_t* rxBuffPtr, uint8_t rxBuffLen  )
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	603a      	str	r2, [r7, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
 80012c2:	4613      	mov	r3, r2
 80012c4:	717b      	strb	r3, [r7, #5]

	// Set i2c Custom Event Counter
	//
	i2cCEV = 2;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <I2C_SendRequest+0x54>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	701a      	strb	r2, [r3, #0]

	i2cDevAddr = devAddr;
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <I2C_SendRequest+0x58>)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	7013      	strb	r3, [r2, #0]
	i2cMemAddr = memAddr;
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <I2C_SendRequest+0x5c>)
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	7013      	strb	r3, [r2, #0]

	i2cRxBufferPtr = rxBuffPtr;
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <I2C_SendRequest+0x60>)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6013      	str	r3, [r2, #0]
	i2cRxBufferLen = rxBuffLen;
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <I2C_SendRequest+0x64>)
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	7013      	strb	r3, [r2, #0]

	// Disable POS
	LL_I2C_DisableBitPOS(I2C1);
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <I2C_SendRequest+0x68>)
 80012e6:	f7ff feda 	bl	800109e <LL_I2C_DisableBitPOS>

	// Enable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
 80012ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <I2C_SendRequest+0x68>)
 80012f0:	f7ff fe96 	bl	8001020 <LL_I2C_AcknowledgeNextData>

	// Generate start condition
	//
	LL_I2C_GenerateStartCondition(I2C1);
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <I2C_SendRequest+0x68>)
 80012f6:	f7ff fea5 	bl	8001044 <LL_I2C_GenerateStartCondition>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000020 	.word	0x20000020
 8001308:	20000021 	.word	0x20000021
 800130c:	20000022 	.word	0x20000022
 8001310:	20000024 	.word	0x20000024
 8001314:	20000028 	.word	0x20000028
 8001318:	40005400 	.word	0x40005400

0800131c <I2C_WriteRequest>:




void I2C_WriteRequest( const uint8_t devAddr, const uint8_t memAddr, const uint8_t payload  )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	460b      	mov	r3, r1
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	717b      	strb	r3, [r7, #5]

	// Set i2c Custom Event Counter
	//
	i2cCEV = 12;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <I2C_WriteRequest+0x40>)
 8001330:	220c      	movs	r2, #12
 8001332:	701a      	strb	r2, [r3, #0]

	i2cTxBytePtr = &payload;
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <I2C_WriteRequest+0x44>)
 8001336:	1d7b      	adds	r3, r7, #5
 8001338:	6013      	str	r3, [r2, #0]

	i2cDevAddr = devAddr;
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <I2C_WriteRequest+0x48>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	7013      	strb	r3, [r2, #0]
	i2cMemAddr = memAddr;
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <I2C_WriteRequest+0x4c>)
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	7013      	strb	r3, [r2, #0]

	// Disable POS
	LL_I2C_DisableBitPOS(I2C1);
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <I2C_WriteRequest+0x50>)
 8001348:	f7ff fea9 	bl	800109e <LL_I2C_DisableBitPOS>

	// Generate start condition
	//
	LL_I2C_GenerateStartCondition(I2C1);
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <I2C_WriteRequest+0x50>)
 800134e:	f7ff fe79 	bl	8001044 <LL_I2C_GenerateStartCondition>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000020 	.word	0x20000020
 8001360:	2000002c 	.word	0x2000002c
 8001364:	20000021 	.word	0x20000021
 8001368:	20000022 	.word	0x20000022
 800136c:	40005400 	.word	0x40005400

08001370 <I2C_IRQHandlerRead>:



void I2C_IRQHandlerRead()
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
	//  After i2cCEV=8, i2c registers are read as long as RXNE is set
	// 	then i2cCEV is set to 0, to finish and disable Read Memory Request
	//
	uint8_t dum;

	if ( LL_I2C_IsActiveFlag_SB(I2C1) ) {
 8001376:	4891      	ldr	r0, [pc, #580]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001378:	f7ff fe1d 	bl	8000fb6 <LL_I2C_IsActiveFlag_SB>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d020      	beq.n	80013c4 <I2C_IRQHandlerRead+0x54>

		switch (i2cCEV) {
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d002      	beq.n	8001390 <I2C_IRQHandlerRead+0x20>
 800138a:	2b06      	cmp	r3, #6
 800138c:	d00d      	beq.n	80013aa <I2C_IRQHandlerRead+0x3a>
			LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(i2cDevAddr));
			i2cCEV=7;
			break;

		default:
			break;
 800138e:	e111      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
			LL_I2C_TransmitData8( I2C1, I2C_7BIT_ADD_WRITE(i2cDevAddr) );
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <I2C_IRQHandlerRead+0x254>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	4887      	ldr	r0, [pc, #540]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800139e:	f7ff fe99 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV = 3;
 80013a2:	4b87      	ldr	r3, [pc, #540]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80013a4:	2203      	movs	r2, #3
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e104      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
			LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(i2cDevAddr));
 80013aa:	4b86      	ldr	r3, [pc, #536]	; (80015c4 <I2C_IRQHandlerRead+0x254>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4881      	ldr	r0, [pc, #516]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80013b8:	f7ff fe8c 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV=7;
 80013bc:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80013be:	2207      	movs	r2, #7
 80013c0:	701a      	strb	r2, [r3, #0]
			break;
 80013c2:	e0f7      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
		}


	} else if ( LL_I2C_IsActiveFlag_ADDR(I2C1) ) {
 80013c4:	487d      	ldr	r0, [pc, #500]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80013c6:	f7ff fe08 	bl	8000fda <LL_I2C_IsActiveFlag_ADDR>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d04c      	beq.n	800146a <I2C_IRQHandlerRead+0xfa>

		switch (i2cCEV) {
 80013d0:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d002      	beq.n	80013de <I2C_IRQHandlerRead+0x6e>
 80013d8:	2b07      	cmp	r3, #7
 80013da:	d007      	beq.n	80013ec <I2C_IRQHandlerRead+0x7c>
 80013dc:	e041      	b.n	8001462 <I2C_IRQHandlerRead+0xf2>
		case 3:
			LL_I2C_ClearFlag_ADDR(I2C1);
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80013e0:	f7ff fe0d 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>
			i2cCEV = 4;
 80013e4:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	701a      	strb	r2, [r3, #0]
			break;
 80013ea:	e0e3      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>

		case 7:

			if ( i2cRxBufferLen == 0) {
 80013ec:	4b76      	ldr	r3, [pc, #472]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d106      	bne.n	8001402 <I2C_IRQHandlerRead+0x92>

				LL_I2C_ClearFlag_ADDR(I2C1);
 80013f4:	4871      	ldr	r0, [pc, #452]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80013f6:	f7ff fe02 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>
				LL_I2C_GenerateStopCondition(I2C1);
 80013fa:	4870      	ldr	r0, [pc, #448]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80013fc:	f7ff fe31 	bl	8001062 <LL_I2C_GenerateStopCondition>
 8001400:	e02b      	b.n	800145a <I2C_IRQHandlerRead+0xea>

			} else if ( i2cRxBufferLen == 1 ) {
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d10d      	bne.n	8001426 <I2C_IRQHandlerRead+0xb6>

				// Disable ack
				LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 800140a:	2100      	movs	r1, #0
 800140c:	486b      	ldr	r0, [pc, #428]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800140e:	f7ff fe07 	bl	8001020 <LL_I2C_AcknowledgeNextData>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001412:	b672      	cpsid	i
}
 8001414:	bf00      	nop

				__disable_irq();

				LL_I2C_ClearFlag_ADDR(I2C1);
 8001416:	4869      	ldr	r0, [pc, #420]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001418:	f7ff fdf1 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>

				LL_I2C_GenerateStopCondition(I2C1);
 800141c:	4867      	ldr	r0, [pc, #412]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800141e:	f7ff fe20 	bl	8001062 <LL_I2C_GenerateStopCondition>
  __ASM volatile ("cpsie i" : : : "memory");
 8001422:	b662      	cpsie	i
}
 8001424:	e019      	b.n	800145a <I2C_IRQHandlerRead+0xea>

				__enable_irq();

			} else if ( i2cRxBufferLen == 2 ) {
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d10d      	bne.n	800144a <I2C_IRQHandlerRead+0xda>

				LL_I2C_EnableBitPOS(I2C1);
 800142e:	4863      	ldr	r0, [pc, #396]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001430:	f7ff fe26 	bl	8001080 <LL_I2C_EnableBitPOS>
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop

				__disable_irq();

				LL_I2C_ClearFlag_ADDR(I2C1);
 8001438:	4860      	ldr	r0, [pc, #384]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800143a:	f7ff fde0 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>

				// Disable ack
				LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 800143e:	2100      	movs	r1, #0
 8001440:	485e      	ldr	r0, [pc, #376]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001442:	f7ff fded 	bl	8001020 <LL_I2C_AcknowledgeNextData>
  __ASM volatile ("cpsie i" : : : "memory");
 8001446:	b662      	cpsie	i
}
 8001448:	e007      	b.n	800145a <I2C_IRQHandlerRead+0xea>
				__enable_irq();

			} else {

				//Enable ack
				LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
 800144a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144e:	485b      	ldr	r0, [pc, #364]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001450:	f7ff fde6 	bl	8001020 <LL_I2C_AcknowledgeNextData>

				LL_I2C_ClearFlag_ADDR(I2C1);
 8001454:	4859      	ldr	r0, [pc, #356]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001456:	f7ff fdd2 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>

			}


			i2cCEV = 8;
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 800145c:	2208      	movs	r2, #8
 800145e:	701a      	strb	r2, [r3, #0]
			break;
 8001460:	e0a8      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>

		default:
			LL_I2C_ClearFlag_ADDR(I2C1);
 8001462:	4856      	ldr	r0, [pc, #344]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001464:	f7ff fdcb 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>
			break;
 8001468:	e0a4      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
		}


	} else if ( LL_I2C_IsActiveFlag_TXE(I2C1) ) {
 800146a:	4854      	ldr	r0, [pc, #336]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800146c:	f7ff fd6d 	bl	8000f4a <LL_I2C_IsActiveFlag_TXE>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d017      	beq.n	80014a6 <I2C_IRQHandlerRead+0x136>

		switch (i2cCEV) {
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b04      	cmp	r3, #4
 800147c:	d002      	beq.n	8001484 <I2C_IRQHandlerRead+0x114>
 800147e:	2b05      	cmp	r3, #5
 8001480:	d00a      	beq.n	8001498 <I2C_IRQHandlerRead+0x128>
			LL_I2C_GenerateStartCondition(I2C1);
			i2cCEV = 6;
			break;

		default:
			break;
 8001482:	e097      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
			LL_I2C_TransmitData8( I2C1, I2C_MEM_ADD_LSB(i2cMemAddr) );
 8001484:	4b51      	ldr	r3, [pc, #324]	; (80015cc <I2C_IRQHandlerRead+0x25c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	484c      	ldr	r0, [pc, #304]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800148c:	f7ff fe22 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV = 5;
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 8001492:	2205      	movs	r2, #5
 8001494:	701a      	strb	r2, [r3, #0]
			break;
 8001496:	e08d      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
			LL_I2C_GenerateStartCondition(I2C1);
 8001498:	4848      	ldr	r0, [pc, #288]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800149a:	f7ff fdd3 	bl	8001044 <LL_I2C_GenerateStartCondition>
			i2cCEV = 6;
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80014a0:	2206      	movs	r2, #6
 80014a2:	701a      	strb	r2, [r3, #0]
			break;
 80014a4:	e086      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
		}


	} else if ( LL_I2C_IsActiveFlag_RXNE(I2C1) ) {
 80014a6:	4845      	ldr	r0, [pc, #276]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80014a8:	f7ff fd73 	bl	8000f92 <LL_I2C_IsActiveFlag_RXNE>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d07f      	beq.n	80015b2 <I2C_IRQHandlerRead+0x242>

		switch (i2cCEV) {
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d175      	bne.n	80015a6 <I2C_IRQHandlerRead+0x236>

		case 8:

			if ( LL_I2C_IsActiveFlag_RXNE(I2C1) )
 80014ba:	4840      	ldr	r0, [pc, #256]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80014bc:	f7ff fd69 	bl	8000f92 <LL_I2C_IsActiveFlag_RXNE>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d06b      	beq.n	800159e <I2C_IRQHandlerRead+0x22e>
			{

				if ( i2cRxBufferLen > 3  ) {
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d912      	bls.n	80014f4 <I2C_IRQHandlerRead+0x184>

					*i2cRxBufferPtr = LL_I2C_ReceiveData8(I2C1);
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 80014d0:	681c      	ldr	r4, [r3, #0]
 80014d2:	483a      	ldr	r0, [pc, #232]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80014d4:	f7ff fdf2 	bl	80010bc <LL_I2C_ReceiveData8>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
					i2cRxBufferPtr++;
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 80014e4:	6013      	str	r3, [r2, #0]

					i2cRxBufferLen--;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 80014f0:	701a      	strb	r2, [r3, #0]
			} else {
				i2cCEV = 0;
				//i2cRxBufferIndex=0;
			}

			break;
 80014f2:	e05f      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
				} else if ( i2cRxBufferLen == 3 ) {
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d116      	bne.n	800152a <I2C_IRQHandlerRead+0x1ba>
					LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80014fc:	2100      	movs	r1, #0
 80014fe:	482f      	ldr	r0, [pc, #188]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001500:	f7ff fd8e 	bl	8001020 <LL_I2C_AcknowledgeNextData>
					*i2cRxBufferPtr = LL_I2C_ReceiveData8(I2C1);
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 8001506:	681c      	ldr	r4, [r3, #0]
 8001508:	482c      	ldr	r0, [pc, #176]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 800150a:	f7ff fdd7 	bl	80010bc <LL_I2C_ReceiveData8>
 800150e:	4603      	mov	r3, r0
 8001510:	7023      	strb	r3, [r4, #0]
					i2cRxBufferPtr++;
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a2d      	ldr	r2, [pc, #180]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 800151a:	6013      	str	r3, [r2, #0]
					i2cRxBufferLen--;
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001526:	701a      	strb	r2, [r3, #0]
			break;
 8001528:	e044      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
				} else if ( i2cRxBufferLen == 2 ) {
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d119      	bne.n	8001566 <I2C_IRQHandlerRead+0x1f6>
  __ASM volatile ("cpsid i" : : : "memory");
 8001532:	b672      	cpsid	i
}
 8001534:	bf00      	nop
					LL_I2C_GenerateStopCondition(I2C1);
 8001536:	4821      	ldr	r0, [pc, #132]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001538:	f7ff fd93 	bl	8001062 <LL_I2C_GenerateStopCondition>
					*i2cRxBufferPtr = LL_I2C_ReceiveData8(I2C1);
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 800153e:	681c      	ldr	r4, [r3, #0]
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001542:	f7ff fdbb 	bl	80010bc <LL_I2C_ReceiveData8>
 8001546:	4603      	mov	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
					i2cRxBufferPtr++;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 8001552:	6013      	str	r3, [r2, #0]
					i2cRxBufferLen--;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 800155e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001560:	b662      	cpsie	i
}
 8001562:	bf00      	nop
			break;
 8001564:	e026      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
				} else if ( i2cRxBufferLen == 1 ) {
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d110      	bne.n	8001590 <I2C_IRQHandlerRead+0x220>
					*i2cRxBufferPtr = LL_I2C_ReceiveData8(I2C1);
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <I2C_IRQHandlerRead+0x260>)
 8001570:	681c      	ldr	r4, [r3, #0]
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001574:	f7ff fda2 	bl	80010bc <LL_I2C_ReceiveData8>
 8001578:	4603      	mov	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]
					i2cRxBufferLen--;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <I2C_IRQHandlerRead+0x258>)
 8001586:	701a      	strb	r2, [r3, #0]
					i2cCEV = 0;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e011      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
					dum = LL_I2C_ReceiveData8(I2C1);
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 8001592:	f7ff fd93 	bl	80010bc <LL_I2C_ReceiveData8>
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
					__NOP();
 800159a:	bf00      	nop
			break;
 800159c:	e00a      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
				i2cCEV = 0;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <I2C_IRQHandlerRead+0x250>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
			break;
 80015a4:	e006      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>

		default:
			dum = LL_I2C_ReceiveData8(I2C1);
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <I2C_IRQHandlerRead+0x24c>)
 80015a8:	f7ff fd88 	bl	80010bc <LL_I2C_ReceiveData8>
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
			break;
 80015b0:	e000      	b.n	80015b4 <I2C_IRQHandlerRead+0x244>
		}

	}
 80015b2:	bf00      	nop

}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	40005400 	.word	0x40005400
 80015c0:	20000020 	.word	0x20000020
 80015c4:	20000021 	.word	0x20000021
 80015c8:	20000028 	.word	0x20000028
 80015cc:	20000022 	.word	0x20000022
 80015d0:	20000024 	.word	0x20000024

080015d4 <I2C_IRQHandlerWrite>:




void I2C_IRQHandlerWrite()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	//  i2cCEV = 16: Another STOP CONDITION generated & payload transmitted
	//
	//  After i2cCEV=16,i2cCEV is set to 0, to finish and disable Write Memory Request
	//

	if ( LL_I2C_IsActiveFlag_SB(I2C1) ) {
 80015da:	4839      	ldr	r0, [pc, #228]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 80015dc:	f7ff fceb 	bl	8000fb6 <LL_I2C_IsActiveFlag_SB>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d010      	beq.n	8001608 <I2C_IRQHandlerWrite+0x34>

		switch (i2cCEV) {
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d15f      	bne.n	80016ae <I2C_IRQHandlerWrite+0xda>
		case 12:
			LL_I2C_TransmitData8( I2C1, I2C_7BIT_ADD_WRITE(i2cDevAddr) );
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <I2C_IRQHandlerWrite+0xf4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	4831      	ldr	r0, [pc, #196]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 80015fc:	f7ff fd6a 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV = 13;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001602:	220d      	movs	r2, #13
 8001604:	701a      	strb	r2, [r3, #0]
			break;
 8001606:	e057      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
		default:
			break;
		}


	} else if ( LL_I2C_IsActiveFlag_ADDR(I2C1) ) {
 8001608:	482d      	ldr	r0, [pc, #180]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800160a:	f7ff fce6 	bl	8000fda <LL_I2C_IsActiveFlag_ADDR>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00e      	beq.n	8001632 <I2C_IRQHandlerWrite+0x5e>

		switch (i2cCEV) {
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d106      	bne.n	800162a <I2C_IRQHandlerWrite+0x56>
		case 13:
			LL_I2C_ClearFlag_ADDR(I2C1);
 800161c:	4828      	ldr	r0, [pc, #160]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800161e:	f7ff fcee 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>
			i2cCEV = 14;
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001624:	220e      	movs	r2, #14
 8001626:	701a      	strb	r2, [r3, #0]

			break;
 8001628:	e046      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>


		default:
			LL_I2C_ClearFlag_ADDR(I2C1);
 800162a:	4825      	ldr	r0, [pc, #148]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800162c:	f7ff fce7 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>

			break;
 8001630:	e042      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
		}


	} else if ( LL_I2C_IsActiveFlag_TXE(I2C1) ) {
 8001632:	4823      	ldr	r0, [pc, #140]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 8001634:	f7ff fc89 	bl	8000f4a <LL_I2C_IsActiveFlag_TXE>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d026      	beq.n	800168c <I2C_IRQHandlerWrite+0xb8>

		switch (i2cCEV) {
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b0e      	cmp	r3, #14
 8001644:	d002      	beq.n	800164c <I2C_IRQHandlerWrite+0x78>
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d00d      	beq.n	8001666 <I2C_IRQHandlerWrite+0x92>
			i2cCEV = 16;

			break;

		default:
			break;
 800164a:	e035      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
			LL_I2C_GenerateStopCondition(I2C1);
 800164c:	481c      	ldr	r0, [pc, #112]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800164e:	f7ff fd08 	bl	8001062 <LL_I2C_GenerateStopCondition>
			LL_I2C_TransmitData8( I2C1, I2C_MEM_ADD_LSB(i2cMemAddr) );
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <I2C_IRQHandlerWrite+0xf8>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800165a:	f7ff fd3b 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV = 15;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001660:	220f      	movs	r2, #15
 8001662:	701a      	strb	r2, [r3, #0]
			break;
 8001664:	e028      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
			LL_I2C_GenerateStopCondition(I2C1);
 8001666:	4816      	ldr	r0, [pc, #88]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 8001668:	f7ff fcfb 	bl	8001062 <LL_I2C_GenerateStopCondition>
			uint8_t test = *i2cTxBytePtr;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <I2C_IRQHandlerWrite+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
			__NOP();
 8001674:	bf00      	nop
			LL_I2C_TransmitData8( I2C1, *i2cTxBytePtr );
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <I2C_IRQHandlerWrite+0xfc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 8001680:	f7ff fd28 	bl	80010d4 <LL_I2C_TransmitData8>
			i2cCEV = 16;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 8001686:	2210      	movs	r2, #16
 8001688:	701a      	strb	r2, [r3, #0]
			break;
 800168a:	e015      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
		}


	} else if ( LL_I2C_IsActiveFlag_BTF(I2C1) ) {
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 800168e:	f7ff fc6e 	bl	8000f6e <LL_I2C_IsActiveFlag_BTF>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <I2C_IRQHandlerWrite+0xde>

		switch (i2cCEV) {
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b10      	cmp	r3, #16
 800169e:	d10a      	bne.n	80016b6 <I2C_IRQHandlerWrite+0xe2>

		case 16:
			LL_I2C_GenerateStopCondition(I2C1);
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <I2C_IRQHandlerWrite+0xec>)
 80016a2:	f7ff fcde 	bl	8001062 <LL_I2C_GenerateStopCondition>
			i2cCEV = 0;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <I2C_IRQHandlerWrite+0xf0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
			break;
 80016ac:	e004      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
			break;
 80016ae:	bf00      	nop
 80016b0:	e002      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>

		default:
			break;
		}

	}
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <I2C_IRQHandlerWrite+0xe4>
			break;
 80016b6:	bf00      	nop


}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005400 	.word	0x40005400
 80016c4:	20000020 	.word	0x20000020
 80016c8:	20000021 	.word	0x20000021
 80016cc:	20000022 	.word	0x20000022
 80016d0:	2000002c 	.word	0x2000002c

080016d4 <I2C_IRQHandlerDefault>:




void I2C_IRQHandlerDefault()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

	uint8_t dum;

	if ( LL_I2C_IsActiveFlag_SB(I2C1) ) {
 80016da:	4814      	ldr	r0, [pc, #80]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 80016dc:	f7ff fc6b 	bl	8000fb6 <LL_I2C_IsActiveFlag_SB>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <I2C_IRQHandlerDefault+0x16>

		__NOP();
 80016e6:	bf00      	nop

		dum = LL_I2C_ReceiveData8(I2C1);

	}

}
 80016e8:	e01c      	b.n	8001724 <I2C_IRQHandlerDefault+0x50>
	} else if ( LL_I2C_IsActiveFlag_ADDR(I2C1) ) {
 80016ea:	4810      	ldr	r0, [pc, #64]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 80016ec:	f7ff fc75 	bl	8000fda <LL_I2C_IsActiveFlag_ADDR>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <I2C_IRQHandlerDefault+0x2a>
		LL_I2C_ClearFlag_ADDR(I2C1);
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 80016f8:	f7ff fc81 	bl	8000ffe <LL_I2C_ClearFlag_ADDR>
}
 80016fc:	e012      	b.n	8001724 <I2C_IRQHandlerDefault+0x50>
	} else if ( LL_I2C_IsActiveFlag_TXE(I2C1) ) {
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 8001700:	f7ff fc23 	bl	8000f4a <LL_I2C_IsActiveFlag_TXE>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_IRQHandlerDefault+0x3a>
		__NOP();
 800170a:	bf00      	nop
}
 800170c:	e00a      	b.n	8001724 <I2C_IRQHandlerDefault+0x50>
	} else if ( LL_I2C_IsActiveFlag_RXNE(I2C1) ) {
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 8001710:	f7ff fc3f 	bl	8000f92 <LL_I2C_IsActiveFlag_RXNE>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <I2C_IRQHandlerDefault+0x50>
		dum = LL_I2C_ReceiveData8(I2C1);
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <I2C_IRQHandlerDefault+0x58>)
 800171c:	f7ff fcce 	bl	80010bc <LL_I2C_ReceiveData8>
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40005400 	.word	0x40005400

08001730 <__NVIC_SetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <LL_RCC_HSE_Enable+0x18>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <LL_RCC_HSE_Enable+0x18>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000

08001794 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <LL_RCC_HSE_IsReady+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <LL_RCC_SetSysClkSource+0x24>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 0203 	bic.w	r2, r3, #3
 80017c8:	4904      	ldr	r1, [pc, #16]	; (80017dc <LL_RCC_SetSysClkSource+0x24>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <LL_RCC_GetSysClkSource+0x14>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000

080017f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <LL_RCC_SetAHBPrescaler+0x24>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	4904      	ldr	r1, [pc, #16]	; (800181c <LL_RCC_SetAHBPrescaler+0x24>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_RCC_SetAPB1Prescaler+0x24>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <LL_RCC_SetAPB2Prescaler+0x24>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <LL_RCC_PLL_Enable+0x18>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <LL_RCC_PLL_Enable+0x18>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000

0800188c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <LL_RCC_PLL_IsReady+0x20>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40021000 	.word	0x40021000

080018b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000

080018e0 <LL_APB1_GRP1_EnableClock>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_APB1_GRP1_EnableClock+0x2c>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4013      	ands	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <LL_APB2_GRP1_EnableClock>:
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LL_APB2_GRP1_EnableClock+0x2c>)
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <LL_APB2_GRP1_EnableClock+0x2c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4013      	ands	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <LL_FLASH_SetLatency+0x24>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 0207 	bic.w	r2, r3, #7
 8001950:	4904      	ldr	r1, [pc, #16]	; (8001964 <LL_FLASH_SetLatency+0x24>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000

08001968 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <LL_FLASH_GetLatency+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40022000 	.word	0x40022000

08001980 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800198e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001992:	6053      	str	r3, [r2, #4]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40010000 	.word	0x40010000

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff ffb2 	bl	8001910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019b0:	f7ff ff96 	bl	80018e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff febb 	bl	8001730 <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80019ba:	f7ff ffe1 	bl	8001980 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f8a3 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f7ff f8af 	bl	8000b24 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c6:	f7ff f87d 	bl	8000ac4 <MX_DMA_Init>
  MX_I2C1_Init();
 80019ca:	f7ff fbc7 	bl	800115c <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */

  uint8_t rxtest[1]={0};
 80019ce:	2300      	movs	r3, #0
 80019d0:	733b      	strb	r3, [r7, #12]

  // Check device ID
  //
  I2C_SendRequest( MPU6050_ADDR, WHO_AM_I_REG, rxtest, 1 );
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	2301      	movs	r3, #1
 80019d8:	2175      	movs	r1, #117	; 0x75
 80019da:	20d0      	movs	r0, #208	; 0xd0
 80019dc:	f7ff fc68 	bl	80012b0 <I2C_SendRequest>
  LL_mDelay(100);
 80019e0:	2064      	movs	r0, #100	; 0x64
 80019e2:	f000 fccd 	bl	8002380 <LL_mDelay>

  //if ( rxtest[0] == 104 ) {

	  // Wake up the sensor
	  //
	  I2C_WriteRequest( MPU6050_ADDR, PWR_MGMT_1_REG, 0x00 );
 80019e6:	2200      	movs	r2, #0
 80019e8:	216b      	movs	r1, #107	; 0x6b
 80019ea:	20d0      	movs	r0, #208	; 0xd0
 80019ec:	f7ff fc96 	bl	800131c <I2C_WriteRequest>
	  LL_mDelay(20);
 80019f0:	2014      	movs	r0, #20
 80019f2:	f000 fcc5 	bl	8002380 <LL_mDelay>

	  // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	  //
	  I2C_WriteRequest( MPU6050_ADDR, SMPLRT_DIV_REG, 0x07 );
 80019f6:	2207      	movs	r2, #7
 80019f8:	2119      	movs	r1, #25
 80019fa:	20d0      	movs	r0, #208	; 0xd0
 80019fc:	f7ff fc8e 	bl	800131c <I2C_WriteRequest>
	  LL_mDelay(20);
 8001a00:	2014      	movs	r0, #20
 8001a02:	f000 fcbd 	bl	8002380 <LL_mDelay>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
	  //
	  I2C_WriteRequest( MPU6050_ADDR, ACCEL_CONFIG_REG, 0x00 );
 8001a06:	2200      	movs	r2, #0
 8001a08:	211c      	movs	r1, #28
 8001a0a:	20d0      	movs	r0, #208	; 0xd0
 8001a0c:	f7ff fc86 	bl	800131c <I2C_WriteRequest>
	  LL_mDelay(20);
 8001a10:	2014      	movs	r0, #20
 8001a12:	f000 fcb5 	bl	8002380 <LL_mDelay>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
	  //
	  I2C_WriteRequest( MPU6050_ADDR, GYRO_CONFIG_REG, 0x00 );
 8001a16:	2200      	movs	r2, #0
 8001a18:	211b      	movs	r1, #27
 8001a1a:	20d0      	movs	r0, #208	; 0xd0
 8001a1c:	f7ff fc7e 	bl	800131c <I2C_WriteRequest>
	  LL_mDelay(20);
 8001a20:	2014      	movs	r0, #20
 8001a22:	f000 fcad 	bl	8002380 <LL_mDelay>
  /* Infinite loop */


  /* USER CODE BEGIN WHILE */

  __NOP();
 8001a26:	bf00      	nop
  while (1)
  {

	// Read accelerations --- //

	I2C_SendRequest( MPU6050_ADDR, ACCEL_XOUT_H_REG, Rec_Data, 6 );
 8001a28:	1d3a      	adds	r2, r7, #4
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	213b      	movs	r1, #59	; 0x3b
 8001a2e:	20d0      	movs	r0, #208	; 0xd0
 8001a30:	f7ff fc3e 	bl	80012b0 <I2C_SendRequest>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001a34:	793b      	ldrb	r3, [r7, #4]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <main+0x14c>)
 8001a44:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <main+0x150>)
 8001a56:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001a58:	7a3b      	ldrb	r3, [r7, #8]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	7a7b      	ldrb	r3, [r7, #9]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <main+0x154>)
 8001a68:	801a      	strh	r2, [r3, #0]

	__NOP();
 8001a6a:	bf00      	nop
	// Convert the RAW values into acceleration in 'g'
	// we have to divide according to the Full scale value set in FS_SEL
	// I have configured FS_SEL = 0. So I am dividing by 16384.0
	// for more details check ACCEL_CONFIG Register

	Ax = Accel_X_RAW/16384.0;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <main+0x14c>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fcbc 	bl	80003f0 <__aeabi_i2d>
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <main+0x158>)
 8001a7e:	f7fe fe4b 	bl	8000718 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe ff2d 	bl	80008e8 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <main+0x15c>)
 8001a92:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <main+0x150>)
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fca8 	bl	80003f0 <__aeabi_i2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <main+0x158>)
 8001aa6:	f7fe fe37 	bl	8000718 <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ff19 	bl	80008e8 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <main+0x160>)
 8001aba:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <main+0x154>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fc94 	bl	80003f0 <__aeabi_i2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <main+0x158>)
 8001ace:	f7fe fe23 	bl	8000718 <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7fe ff05 	bl	80008e8 <__aeabi_d2f>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <main+0x164>)
 8001ae2:	6013      	str	r3, [r2, #0]


	LL_mDelay(200);
 8001ae4:	20c8      	movs	r0, #200	; 0xc8
 8001ae6:	f000 fc4b 	bl	8002380 <LL_mDelay>
	I2C_SendRequest( MPU6050_ADDR, ACCEL_XOUT_H_REG, Rec_Data, 6 );
 8001aea:	e79d      	b.n	8001a28 <main+0x88>
 8001aec:	20000030 	.word	0x20000030
 8001af0:	20000032 	.word	0x20000032
 8001af4:	20000034 	.word	0x20000034
 8001af8:	40d00000 	.word	0x40d00000
 8001afc:	20000038 	.word	0x20000038
 8001b00:	2000003c 	.word	0x2000003c
 8001b04:	20000040 	.word	0x20000040

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff ff17 	bl	8001940 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001b12:	bf00      	nop
 8001b14:	f7ff ff28 	bl	8001968 <LL_FLASH_GetLatency>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d1fa      	bne.n	8001b14 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001b1e:	f7ff fe2b 	bl	8001778 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001b22:	bf00      	nop
 8001b24:	f7ff fe36 	bl	8001794 <LL_RCC_HSE_IsReady>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d1fa      	bne.n	8001b24 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8001b2e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001b32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001b36:	f7ff febb 	bl	80018b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b3a:	f7ff fe99 	bl	8001870 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b3e:	bf00      	nop
 8001b40:	f7ff fea4 	bl	800188c <LL_RCC_PLL_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d1fa      	bne.n	8001b40 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fe54 	bl	80017f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b54:	f7ff fe64 	bl	8001820 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff fe75 	bl	8001848 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff fe2a 	bl	80017b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b64:	bf00      	nop
 8001b66:	f7ff fe3b 	bl	80017e0 <LL_RCC_GetSysClkSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d1fa      	bne.n	8001b66 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <SystemClock_Config+0x78>)
 8001b72:	f000 fbf7 	bl	8002364 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001b76:	4802      	ldr	r0, [pc, #8]	; (8001b80 <SystemClock_Config+0x78>)
 8001b78:	f000 fc26 	bl	80023c8 <LL_SetSystemCoreClock>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	044aa200 	.word	0x044aa200

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <NMI_Handler+0x4>

08001b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler+0x4>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

	if ( i2cCEV == 0 ) {
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <I2C1_EV_IRQHandler+0x48>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <I2C1_EV_IRQHandler+0x12>

		I2C_IRQHandlerDefault();
 8001bec:	f7ff fd72 	bl	80016d4 <I2C_IRQHandlerDefault>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf0:	e018      	b.n	8001c24 <I2C1_EV_IRQHandler+0x44>
	} else if ( i2cCEV > 0 && i2cCEV <= 10 ) {
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <I2C1_EV_IRQHandler+0x48>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <I2C1_EV_IRQHandler+0x28>
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <I2C1_EV_IRQHandler+0x48>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b0a      	cmp	r3, #10
 8001c00:	d802      	bhi.n	8001c08 <I2C1_EV_IRQHandler+0x28>
		I2C_IRQHandlerRead();
 8001c02:	f7ff fbb5 	bl	8001370 <I2C_IRQHandlerRead>
 8001c06:	e00d      	b.n	8001c24 <I2C1_EV_IRQHandler+0x44>
	} else if ( i2cCEV > 10 && i2cCEV <=20 ) {
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <I2C1_EV_IRQHandler+0x48>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b0a      	cmp	r3, #10
 8001c0e:	d906      	bls.n	8001c1e <I2C1_EV_IRQHandler+0x3e>
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <I2C1_EV_IRQHandler+0x48>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b14      	cmp	r3, #20
 8001c16:	d802      	bhi.n	8001c1e <I2C1_EV_IRQHandler+0x3e>
		I2C_IRQHandlerWrite();
 8001c18:	f7ff fcdc 	bl	80015d4 <I2C_IRQHandlerWrite>
 8001c1c:	e002      	b.n	8001c24 <I2C1_EV_IRQHandler+0x44>
		I2C_IRQHandlerDefault();
 8001c1e:	f7ff fd59 	bl	80016d4 <I2C_IRQHandlerDefault>
}
 8001c22:	e7ff      	b.n	8001c24 <I2C1_EV_IRQHandler+0x44>
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000020 	.word	0x20000020

08001c2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c44:	f7ff fff8 	bl	8001c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c4a:	490c      	ldr	r1, [pc, #48]	; (8001c7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c60:	4c09      	ldr	r4, [pc, #36]	; (8001c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f000 fbb9 	bl	80023e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c72:	f7ff fe95 	bl	80019a0 <main>
  bx lr
 8001c76:	4770      	bx	lr
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001c80:	0800246c 	.word	0x0800246c
  ldr r2, =_sbss
 8001c84:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001c88:	20000044 	.word	0x20000044

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>

08001c8e <LL_GPIO_SetPinMode>:
{
 8001c8e:	b490      	push	{r4, r7}
 8001c90:	b088      	sub	sp, #32
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0e1b      	lsrs	r3, r3, #24
 8001ca2:	4413      	add	r3, r2
 8001ca4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	61bb      	str	r3, [r7, #24]
  return result;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6023      	str	r3, [r4, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc90      	pop	{r4, r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_GPIO_SetPinSpeed>:
{
 8001cf2:	b490      	push	{r4, r7}
 8001cf4:	b088      	sub	sp, #32
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0e1b      	lsrs	r3, r3, #24
 8001d06:	4413      	add	r3, r2
 8001d08:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	613b      	str	r3, [r7, #16]
  return result;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	2103      	movs	r1, #3
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	61bb      	str	r3, [r7, #24]
  return result;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	6023      	str	r3, [r4, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc90      	pop	{r4, r7}
 8001d54:	4770      	bx	lr

08001d56 <LL_GPIO_SetPinOutputType>:
{
 8001d56:	b490      	push	{r4, r7}
 8001d58:	b088      	sub	sp, #32
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0e1b      	lsrs	r3, r3, #24
 8001d6a:	4413      	add	r3, r2
 8001d6c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	613b      	str	r3, [r7, #16]
  return result;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	2104      	movs	r1, #4
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	6023      	str	r3, [r4, #0]
}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc90      	pop	{r4, r7}
 8001db8:	4770      	bx	lr

08001dba <LL_GPIO_SetPinPull>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b087      	sub	sp, #28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	613b      	str	r3, [r7, #16]
  return result;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	408b      	lsls	r3, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	60da      	str	r2, [r3, #12]
}
 8001df4:	bf00      	nop
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	60fb      	str	r3, [r7, #12]
  return result;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001e28:	e044      	b.n	8001eb4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03a      	beq.n	8001eae <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b07      	cmp	r3, #7
 8001e3c:	d806      	bhi.n	8001e4c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001e3e:	f240 1201 	movw	r2, #257	; 0x101
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	e008      	b.n	8001e5e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3b08      	subs	r3, #8
 8001e50:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e5c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d106      	bne.n	8001e74 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa3 	bl	8001dba <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff06 	bl	8001c8e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d003      	beq.n	8001e92 <LL_GPIO_Init+0x94>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b09      	cmp	r3, #9
 8001e90:	d10d      	bne.n	8001eae <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	461a      	mov	r2, r3
 8001e98:	69b9      	ldr	r1, [r7, #24]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff29 	bl	8001cf2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff54 	bl	8001d56 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1b4      	bne.n	8001e2a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <LL_I2C_Enable>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <LL_I2C_Disable>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 0201 	bic.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_I2C_SetOwnAddress1>:
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <LL_I2C_ConfigSpeed>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4a41      	ldr	r2, [pc, #260]	; (8002054 <LL_I2C_ConfigSpeed+0x120>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4939      	ldr	r1, [pc, #228]	; (8002058 <LL_I2C_ConfigSpeed+0x124>)
 8001f72:	428b      	cmp	r3, r1
 8001f74:	d802      	bhi.n	8001f7c <LL_I2C_ConfigSpeed+0x48>
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	e009      	b.n	8001f90 <LL_I2C_ConfigSpeed+0x5c>
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4935      	ldr	r1, [pc, #212]	; (800205c <LL_I2C_ConfigSpeed+0x128>)
 8001f88:	fba1 1303 	umull	r1, r3, r1, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <LL_I2C_ConfigSpeed+0x124>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d939      	bls.n	8002012 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d117      	bne.n	8001fd4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	e01d      	b.n	800200a <LL_I2C_ConfigSpeed+0xd6>
 8001fce:	f248 0301 	movw	r3, #32769	; 0x8001
 8001fd2:	e01a      	b.n	800200a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009a      	lsls	r2, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002004:	e001      	b.n	800200a <LL_I2C_ConfigSpeed+0xd6>
 8002006:	f248 0301 	movw	r3, #32769	; 0x8001
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e011      	b.n	8002036 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	fbb2 f2f3 	udiv	r2, r2, r3
 800201c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002020:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	e000      	b.n	8002034 <LL_I2C_ConfigSpeed+0x100>
 8002032:	2304      	movs	r3, #4
 8002034:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800203e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	61da      	str	r2, [r3, #28]
}
 800204a:	bf00      	nop
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	431bde83 	.word	0x431bde83
 8002058:	000186a0 	.word	0x000186a0
 800205c:	10624dd3 	.word	0x10624dd3

08002060 <LL_I2C_SetMode>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 021a 	bic.w	r2, r3, #26
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	601a      	str	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <LL_I2C_AcknowledgeNextData>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff18 	bl	8001ee8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f87b 	bl	80021b8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80020c2:	6939      	ldr	r1, [r7, #16]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff31 	bl	8001f34 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	461a      	mov	r2, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff12 	bl	8001f06 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffb9 	bl	8002060 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff feeb 	bl	8001eca <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffc2 	bl	8002084 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <LL_RCC_GetSysClkSource>:
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <LL_RCC_GetSysClkSource+0x14>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000

08002124 <LL_RCC_GetAHBPrescaler>:
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <LL_RCC_GetAHBPrescaler+0x14>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000

0800213c <LL_RCC_GetAPB1Prescaler>:
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000

08002154 <LL_RCC_GetAPB2Prescaler>:
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <LL_RCC_GetAPB2Prescaler+0x14>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000

0800216c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <LL_RCC_PLL_GetMainSource+0x14>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000

08002184 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000

0800219c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <LL_RCC_PLL_GetPrediv+0x18>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0c5b      	lsrs	r3, r3, #17
 80021a6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80021c0:	f000 f820 	bl	8002204 <RCC_GetSystemClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f83e 	bl	8002250 <RCC_GetHCLKClockFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f84c 	bl	800227c <RCC_GetPCLK1ClockFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f858 	bl	80022a4 <RCC_GetPCLK2ClockFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800220e:	f7ff ff7d 	bl	800210c <LL_RCC_GetSysClkSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b08      	cmp	r3, #8
 8002216:	d00c      	beq.n	8002232 <RCC_GetSystemClockFreq+0x2e>
 8002218:	2b08      	cmp	r3, #8
 800221a:	d80e      	bhi.n	800223a <RCC_GetSystemClockFreq+0x36>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <RCC_GetSystemClockFreq+0x22>
 8002220:	2b04      	cmp	r3, #4
 8002222:	d003      	beq.n	800222c <RCC_GetSystemClockFreq+0x28>
 8002224:	e009      	b.n	800223a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <RCC_GetSystemClockFreq+0x48>)
 8002228:	607b      	str	r3, [r7, #4]
      break;
 800222a:	e009      	b.n	8002240 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <RCC_GetSystemClockFreq+0x48>)
 800222e:	607b      	str	r3, [r7, #4]
      break;
 8002230:	e006      	b.n	8002240 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002232:	f000 f84b 	bl	80022cc <RCC_PLL_GetFreqDomain_SYS>
 8002236:	6078      	str	r0, [r7, #4]
      break;
 8002238:	e002      	b.n	8002240 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <RCC_GetSystemClockFreq+0x48>)
 800223c:	607b      	str	r3, [r7, #4]
      break;
 800223e:	bf00      	nop
  }

  return frequency;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	007a1200 	.word	0x007a1200

08002250 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002258:	f7ff ff64 	bl	8002124 <LL_RCC_GetAHBPrescaler>
 800225c:	4603      	mov	r3, r0
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <RCC_GetHCLKClockFreq+0x28>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	40d3      	lsrs	r3, r2
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800244c 	.word	0x0800244c

0800227c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002284:	f7ff ff5a 	bl	800213c <LL_RCC_GetAPB1Prescaler>
 8002288:	4603      	mov	r3, r0
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	40d3      	lsrs	r3, r2
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800245c 	.word	0x0800245c

080022a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80022ac:	f7ff ff52 	bl	8002154 <LL_RCC_GetAPB2Prescaler>
 80022b0:	4603      	mov	r3, r0
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	461a      	mov	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	40d3      	lsrs	r3, r2
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	0800245c 	.word	0x0800245c

080022cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022da:	f7ff ff47 	bl	800216c <LL_RCC_PLL_GetMainSource>
 80022de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d003      	beq.n	80022f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80022ee:	e00b      	b.n	8002308 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80022f2:	607b      	str	r3, [r7, #4]
      break;
 80022f4:	e00b      	b.n	800230e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80022f6:	f7ff ff51 	bl	800219c <LL_RCC_PLL_GetPrediv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	607b      	str	r3, [r7, #4]
      break;
 8002306:	e002      	b.n	800230e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800230a:	607b      	str	r3, [r7, #4]
      break;
 800230c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800230e:	f7ff ff39 	bl	8002184 <LL_RCC_PLL_GetMultiplicator>
 8002312:	4603      	mov	r3, r0
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	3302      	adds	r3, #2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	003d0900 	.word	0x003d0900
 800232c:	007a1200 	.word	0x007a1200

08002330 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4a07      	ldr	r2, [pc, #28]	; (8002360 <LL_InitTick+0x30>)
 8002344:	3b01      	subs	r3, #1
 8002346:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <LL_InitTick+0x30>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_InitTick+0x30>)
 8002350:	2205      	movs	r2, #5
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800236c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ffdd 	bl	8002330 <LL_InitTick>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <LL_mDelay+0x44>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800238e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002396:	d00c      	beq.n	80023b2 <LL_mDelay+0x32>
  {
    Delay++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800239e:	e008      	b.n	80023b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <LL_mDelay+0x44>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <LL_mDelay+0x32>
    {
      Delay--;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f3      	bne.n	80023a0 <LL_mDelay+0x20>
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <LL_SetSystemCoreClock+0x18>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000

080023e4 <__libc_init_array>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	2600      	movs	r6, #0
 80023e8:	4d0c      	ldr	r5, [pc, #48]	; (800241c <__libc_init_array+0x38>)
 80023ea:	4c0d      	ldr	r4, [pc, #52]	; (8002420 <__libc_init_array+0x3c>)
 80023ec:	1b64      	subs	r4, r4, r5
 80023ee:	10a4      	asrs	r4, r4, #2
 80023f0:	42a6      	cmp	r6, r4
 80023f2:	d109      	bne.n	8002408 <__libc_init_array+0x24>
 80023f4:	f000 f81a 	bl	800242c <_init>
 80023f8:	2600      	movs	r6, #0
 80023fa:	4d0a      	ldr	r5, [pc, #40]	; (8002424 <__libc_init_array+0x40>)
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <__libc_init_array+0x44>)
 80023fe:	1b64      	subs	r4, r4, r5
 8002400:	10a4      	asrs	r4, r4, #2
 8002402:	42a6      	cmp	r6, r4
 8002404:	d105      	bne.n	8002412 <__libc_init_array+0x2e>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	f855 3b04 	ldr.w	r3, [r5], #4
 800240c:	4798      	blx	r3
 800240e:	3601      	adds	r6, #1
 8002410:	e7ee      	b.n	80023f0 <__libc_init_array+0xc>
 8002412:	f855 3b04 	ldr.w	r3, [r5], #4
 8002416:	4798      	blx	r3
 8002418:	3601      	adds	r6, #1
 800241a:	e7f2      	b.n	8002402 <__libc_init_array+0x1e>
 800241c:	08002464 	.word	0x08002464
 8002420:	08002464 	.word	0x08002464
 8002424:	08002464 	.word	0x08002464
 8002428:	08002468 	.word	0x08002468

0800242c <_init>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr

08002438 <_fini>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr
