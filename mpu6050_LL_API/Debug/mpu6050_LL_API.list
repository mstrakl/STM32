
mpu6050_LL_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000172c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001858  08001858  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001858  08001858  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001858  08001858  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08001864  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001864  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004797  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001354  00000000  00000000  000247c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00025b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  00026198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c1c  00000000  00000000  00026770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c0b  00000000  00000000  0003838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ba7f  00000000  00000000  0003cf97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00098a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  00098a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001820 	.word	0x08001820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001820 	.word	0x08001820

0800014c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
         );
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	4907      	ldr	r1, [pc, #28]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000

08000288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffe3 	bl	8000258 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000292:	f7ff ff5b 	bl	800014c <__NVIC_GetPriorityGrouping>
 8000296:	4603      	mov	r3, r0
 8000298:	2200      	movs	r2, #0
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffa9 	bl	80001f4 <NVIC_EncodePriority>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4619      	mov	r1, r3
 80002a6:	2010      	movs	r0, #16
 80002a8:	f7ff ff7a 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ac:	2010      	movs	r0, #16
 80002ae:	f7ff ff5b 	bl	8000168 <__NVIC_EnableIRQ>

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c2:	699a      	ldr	r2, [r3, #24]
 80002c4:	4907      	ldr	r1, [pc, #28]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ce:	699a      	ldr	r2, [r3, #24]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d6:	68fb      	ldr	r3, [r7, #12]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80002ec:	2020      	movs	r0, #32
 80002ee:	f7ff ffe3 	bl	80002b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80002f2:	2004      	movs	r0, #4
 80002f4:	f7ff ffe0 	bl	80002b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80002f8:	2008      	movs	r0, #8
 80002fa:	f7ff ffdd 	bl	80002b8 <LL_APB2_GRP1_EnableClock>

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <__NVIC_GetPriorityGrouping>:
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <__NVIC_GetPriorityGrouping+0x18>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 0307 	and.w	r3, r3, #7
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <__NVIC_EnableIRQ>:
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	2b00      	cmp	r3, #0
 8000330:	db0b      	blt.n	800034a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	f003 021f 	and.w	r2, r3, #31
 8000338:	4906      	ldr	r1, [pc, #24]	; (8000354 <__NVIC_EnableIRQ+0x34>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	095b      	lsrs	r3, r3, #5
 8000340:	2001      	movs	r0, #1
 8000342:	fa00 f202 	lsl.w	r2, r0, r2
 8000346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100

08000358 <__NVIC_SetPriority>:
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	db0a      	blt.n	8000382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <__NVIC_SetPriority+0x4c>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	440b      	add	r3, r1
 800037c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000380:	e00a      	b.n	8000398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4908      	ldr	r1, [pc, #32]	; (80003a8 <__NVIC_SetPriority+0x50>)
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f003 030f 	and.w	r3, r3, #15
 800038e:	3b04      	subs	r3, #4
 8000390:	0112      	lsls	r2, r2, #4
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	440b      	add	r3, r1
 8000396:	761a      	strb	r2, [r3, #24]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000e100 	.word	0xe000e100
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <NVIC_EncodePriority>:
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	f1c3 0307 	rsb	r3, r3, #7
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	bf28      	it	cs
 80003ca:	2304      	movcs	r3, #4
 80003cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3304      	adds	r3, #4
 80003d2:	2b06      	cmp	r3, #6
 80003d4:	d902      	bls.n	80003dc <NVIC_EncodePriority+0x30>
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	3b03      	subs	r3, #3
 80003da:	e000      	b.n	80003de <NVIC_EncodePriority+0x32>
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	43da      	mvns	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	401a      	ands	r2, r3
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	43d9      	mvns	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000404:	4313      	orrs	r3, r2
}
 8000406:	4618      	mov	r0, r3
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <LL_DMA_SetDataTransferDirection+0x44>)
 8000422:	5cd3      	ldrb	r3, [r2, r3]
 8000424:	461a      	mov	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000430:	f023 0310 	bic.w	r3, r3, #16
 8000434:	68ba      	ldr	r2, [r7, #8]
 8000436:	3a01      	subs	r2, #1
 8000438:	4906      	ldr	r1, [pc, #24]	; (8000454 <LL_DMA_SetDataTransferDirection+0x44>)
 800043a:	5c8a      	ldrb	r2, [r1, r2]
 800043c:	4611      	mov	r1, r2
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	440a      	add	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4313      	orrs	r3, r2
 8000448:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	08001838 	.word	0x08001838

08000458 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LL_DMA_SetMode+0x40>)
 800046a:	5cd3      	ldrb	r3, [r2, r3]
 800046c:	461a      	mov	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f023 0220 	bic.w	r2, r3, #32
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	3b01      	subs	r3, #1
 800047c:	4906      	ldr	r1, [pc, #24]	; (8000498 <LL_DMA_SetMode+0x40>)
 800047e:	5ccb      	ldrb	r3, [r1, r3]
 8000480:	4619      	mov	r1, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	440b      	add	r3, r1
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4313      	orrs	r3, r2
 800048c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	08001838 	.word	0x08001838

0800049c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <LL_DMA_SetPeriphIncMode+0x40>)
 80004ae:	5cd3      	ldrb	r3, [r2, r3]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <LL_DMA_SetPeriphIncMode+0x40>)
 80004c2:	5ccb      	ldrb	r3, [r1, r3]
 80004c4:	4619      	mov	r1, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	440b      	add	r3, r1
 80004ca:	4619      	mov	r1, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	08001838 	.word	0x08001838

080004e0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LL_DMA_SetMemoryIncMode+0x40>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3b01      	subs	r3, #1
 8000504:	4906      	ldr	r1, [pc, #24]	; (8000520 <LL_DMA_SetMemoryIncMode+0x40>)
 8000506:	5ccb      	ldrb	r3, [r1, r3]
 8000508:	4619      	mov	r1, r3
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	440b      	add	r3, r1
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4313      	orrs	r3, r2
 8000514:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	08001838 	.word	0x08001838

08000524 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LL_DMA_SetPeriphSize+0x40>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	461a      	mov	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	4413      	add	r3, r2
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	3b01      	subs	r3, #1
 8000548:	4906      	ldr	r1, [pc, #24]	; (8000564 <LL_DMA_SetPeriphSize+0x40>)
 800054a:	5ccb      	ldrb	r3, [r1, r3]
 800054c:	4619      	mov	r1, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	440b      	add	r3, r1
 8000552:	4619      	mov	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	08001838 	.word	0x08001838

08000568 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <LL_DMA_SetMemorySize+0x40>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	461a      	mov	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4413      	add	r3, r2
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3b01      	subs	r3, #1
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <LL_DMA_SetMemorySize+0x40>)
 800058e:	5ccb      	ldrb	r3, [r1, r3]
 8000590:	4619      	mov	r1, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	440b      	add	r3, r1
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	08001838 	.word	0x08001838

080005ac <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <LL_DMA_SetChannelPriorityLevel+0x40>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	461a      	mov	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4906      	ldr	r1, [pc, #24]	; (80005ec <LL_DMA_SetChannelPriorityLevel+0x40>)
 80005d2:	5ccb      	ldrb	r3, [r1, r3]
 80005d4:	4619      	mov	r1, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	440b      	add	r3, r1
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
             Priority);
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	08001838 	.word	0x08001838

080005f0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <LL_DMA_SetPeriphAddress+0x2c>)
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	461a      	mov	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6093      	str	r3, [r2, #8]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	08001838 	.word	0x08001838

08000620 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f043 0201 	orr.w	r2, r3, #1
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <LL_I2C_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_I2C_DMA_GetRegAddr
  * @param  I2Cx I2C Instance.
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  return (uint32_t) & (I2Cx->DR);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3310      	adds	r3, #16
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60da      	str	r2, [r3, #12]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f023 0201 	bic.w	r2, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	60da      	str	r2, [r3, #12]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	605a      	str	r2, [r3, #4]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <LL_I2C_EnableIT_BUF>:
  * @rmtoll CR2          ITBUFEN       LL_I2C_EnableIT_BUF
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_BUF(I2C_TypeDef *I2Cx)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	605a      	str	r2, [r3, #4]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <LL_APB1_GRP1_EnableClock>:
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_APB2_GRP1_EnableClock>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80007b6:	699a      	ldr	r2, [r3, #24]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80007f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80007fa:	f7ff ffb9 	bl	8000770 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80007fe:	2008      	movs	r0, #8
 8000800:	f7ff ffce 	bl	80007a0 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000804:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800080a:	2309      	movs	r3, #9
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000812:	2304      	movs	r3, #4
 8000814:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_I2C1_Init+0x144>)
 800081c:	f000 fce9 	bl	80011f2 <LL_GPIO_Init>

  /* I2C1 DMA Init */

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000820:	2210      	movs	r2, #16
 8000822:	2106      	movs	r1, #6
 8000824:	483c      	ldr	r0, [pc, #240]	; (8000918 <MX_I2C1_Init+0x148>)
 8000826:	f7ff fdf3 	bl	8000410 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800082a:	2200      	movs	r2, #0
 800082c:	2106      	movs	r1, #6
 800082e:	483a      	ldr	r0, [pc, #232]	; (8000918 <MX_I2C1_Init+0x148>)
 8000830:	f7ff febc 	bl	80005ac <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8000834:	2200      	movs	r2, #0
 8000836:	2106      	movs	r1, #6
 8000838:	4837      	ldr	r0, [pc, #220]	; (8000918 <MX_I2C1_Init+0x148>)
 800083a:	f7ff fe0d 	bl	8000458 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800083e:	2200      	movs	r2, #0
 8000840:	2106      	movs	r1, #6
 8000842:	4835      	ldr	r0, [pc, #212]	; (8000918 <MX_I2C1_Init+0x148>)
 8000844:	f7ff fe2a 	bl	800049c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	2106      	movs	r1, #6
 800084c:	4832      	ldr	r0, [pc, #200]	; (8000918 <MX_I2C1_Init+0x148>)
 800084e:	f7ff fe47 	bl	80004e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000852:	2200      	movs	r2, #0
 8000854:	2106      	movs	r1, #6
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <MX_I2C1_Init+0x148>)
 8000858:	f7ff fe64 	bl	8000524 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800085c:	2200      	movs	r2, #0
 800085e:	2106      	movs	r1, #6
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_I2C1_Init+0x148>)
 8000862:	f7ff fe81 	bl	8000568 <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000866:	f7ff fd4d 	bl	8000304 <__NVIC_GetPriorityGrouping>
 800086a:	4603      	mov	r3, r0
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd9b 	bl	80003ac <NVIC_EncodePriority>
 8000876:	4603      	mov	r3, r0
 8000878:	4619      	mov	r1, r3
 800087a:	201f      	movs	r0, #31
 800087c:	f7ff fd6c 	bl	8000358 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000880:	201f      	movs	r0, #31
 8000882:	f7ff fd4d 	bl	8000320 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000886:	f7ff fd3d 	bl	8000304 <__NVIC_GetPriorityGrouping>
 800088a:	4603      	mov	r3, r0
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fd8b 	bl	80003ac <NVIC_EncodePriority>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	2020      	movs	r0, #32
 800089c:	f7ff fd5c 	bl	8000358 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008a0:	2020      	movs	r0, #32
 80008a2:	f7ff fd3d 	bl	8000320 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_6, LL_I2C_DMA_GetRegAddr(I2C1));
 80008a6:	481d      	ldr	r0, [pc, #116]	; (800091c <MX_I2C1_Init+0x14c>)
 80008a8:	f7ff fec9 	bl	800063e <LL_I2C_DMA_GetRegAddr>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	2106      	movs	r1, #6
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <MX_I2C1_Init+0x148>)
 80008b4:	f7ff fe9c 	bl	80005f0 <LL_DMA_SetPeriphAddress>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_I2C1_Init+0x14c>)
 80008ba:	f7ff fefb 	bl	80006b4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80008be:	4817      	ldr	r0, [pc, #92]	; (800091c <MX_I2C1_Init+0x14c>)
 80008c0:	f7ff fed7 	bl	8000672 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80008c4:	4815      	ldr	r0, [pc, #84]	; (800091c <MX_I2C1_Init+0x14c>)
 80008c6:	f7ff fec5 	bl	8000654 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_I2C1_Init+0x150>)
 80008d0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80008da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80008e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_I2C1_Init+0x14c>)
 80008ee:	f000 fdd5 	bl	800149c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C1_Init+0x14c>)
 80008f6:	f7ff fecb 	bl	8000690 <LL_I2C_SetOwnAddress2>
  // Any of these Buffer events will generate interrupt.
  // ! ONLY if event interrupts are enabled too !
  // 
  // Receive buffer not empty (RXNE)
  // Transmit buffer empty (TXE)
  LL_I2C_EnableIT_BUF(I2C1);
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_I2C1_Init+0x14c>)
 80008fc:	f7ff fef8 	bl	80006f0 <LL_I2C_EnableIT_BUF>
  // Start Bit (SB)
  // Address sent, Address matched (ADDR)
  // 10-bit header sent (ADD10)
  // Stop detection  (STOPF)
  // Byte transfer finished (BTF)
  LL_I2C_EnableIT_EVT(I2C1);
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_I2C1_Init+0x14c>)
 8000902:	f7ff fee6 	bl	80006d2 <LL_I2C_EnableIT_EVT>
  // SMBus Alert pin event detection (SMBALERT)
  //LL_I2C_EnableIT_ERR(I2C1);

  //LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);

  LL_I2C_Enable(I2C1);
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C1_Init+0x14c>)
 8000908:	f7ff fe8a 	bl	8000620 <LL_I2C_Enable>


  /* USER CODE END I2C1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010c00 	.word	0x40010c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40005400 	.word	0x40005400
 8000920:	000186a0 	.word	0x000186a0

08000924 <I2C_SendRequest>:

}


void I2C_SendRequest( const uint8_t devAddr, const uint8_t memAddr, uint8_t* rxBuffPtr, uint8_t rxBuffLen  )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	603a      	str	r2, [r7, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	460b      	mov	r3, r1
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	717b      	strb	r3, [r7, #5]


	i2cDevAddr = devAddr;
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <I2C_SendRequest+0x54>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	7013      	strb	r3, [r2, #0]
	i2cMemAddr = memAddr;
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <I2C_SendRequest+0x58>)
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	7013      	strb	r3, [r2, #0]

	i2cRxBufferPtr = rxBuffPtr;
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <I2C_SendRequest+0x5c>)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	6013      	str	r3, [r2, #0]
	i2cRxBufferLen = rxBuffLen;
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <I2C_SendRequest+0x60>)
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	7013      	strb	r3, [r2, #0]

	// Disable POS
	LL_I2C_DisableBitPOS(I2C1);
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <I2C_SendRequest+0x64>)
 8000954:	f7ff fefc 	bl	8000750 <LL_I2C_DisableBitPOS>

	// Enable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <I2C_SendRequest+0x64>)
 800095e:	f7ff fed6 	bl	800070e <LL_I2C_AcknowledgeNextData>

	// Generate start condition
	//
	LL_I2C_GenerateStartCondition(I2C1);
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <I2C_SendRequest+0x64>)
 8000964:	f7ff fee5 	bl	8000732 <LL_I2C_GenerateStartCondition>


	// Set i2c Custom Event Counter
	//
	i2cCEV = 2;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <I2C_SendRequest+0x68>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
	__NOP();
 800096e:	bf00      	nop

}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000021 	.word	0x20000021
 800097c:	20000022 	.word	0x20000022
 8000980:	20000024 	.word	0x20000024
 8000984:	20000028 	.word	0x20000028
 8000988:	40005400 	.word	0x40005400
 800098c:	20000020 	.word	0x20000020

08000990 <__NVIC_SetPriorityGrouping>:
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <LL_RCC_HSE_Enable+0x18>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <LL_RCC_HSE_Enable+0x18>)
 80009e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000

080009f4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LL_RCC_HSE_IsReady+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000

08000a18 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <LL_RCC_SetSysClkSource+0x24>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f023 0203 	bic.w	r2, r3, #3
 8000a28:	4904      	ldr	r1, [pc, #16]	; (8000a3c <LL_RCC_SetSysClkSource+0x24>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	604b      	str	r3, [r1, #4]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <LL_RCC_GetSysClkSource+0x14>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a90:	4904      	ldr	r1, [pc, #16]	; (8000aa4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ab8:	4904      	ldr	r1, [pc, #16]	; (8000acc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <LL_RCC_PLL_Enable+0x18>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <LL_RCC_PLL_Enable+0x18>)
 8000ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000

08000aec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <LL_RCC_PLL_IsReady+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	4903      	ldr	r1, [pc, #12]	; (8000b3c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <LL_APB1_GRP1_EnableClock>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b4a:	69da      	ldr	r2, [r3, #28]
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b56:	69da      	ldr	r2, [r3, #28]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <LL_APB2_GRP1_EnableClock>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b7a:	699a      	ldr	r2, [r3, #24]
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LL_FLASH_SetLatency+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0207 	bic.w	r2, r3, #7
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <LL_FLASH_SetLatency+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LL_FLASH_GetLatency+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40022000 	.word	0x40022000

08000be0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	6053      	str	r3, [r2, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40010000 	.word	0x40010000

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ffb2 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c10:	f7ff ff96 	bl	8000b40 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f7ff febb 	bl	8000990 <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000c1a:	f7ff ffe1 	bl	8000be0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 f82b 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f7ff fb61 	bl	80002e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c26:	f7ff fb2f 	bl	8000288 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c2a:	f7ff fdd1 	bl	80007d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //MPU6050_Init();

  uint8_t rxtest[10]={0};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	809a      	strh	r2, [r3, #4]
  __NOP();
 8000c3c:	bf00      	nop
  I2C_SendRequest( MPU6050_ADDR, WHO_AM_I_REG, rxtest, 10 );
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	230a      	movs	r3, #10
 8000c44:	2175      	movs	r1, #117	; 0x75
 8000c46:	20d0      	movs	r0, #208	; 0xd0
 8000c48:	f7ff fe6c 	bl	8000924 <I2C_SendRequest>
  LL_mDelay(100);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f000 fd91 	bl	8001774 <LL_mDelay>

  uint8_t rx2test[10]={0};
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	809a      	strh	r2, [r3, #4]
  __NOP();
 8000c5e:	bf00      	nop
  I2C_SendRequest( MPU6050_ADDR, WHO_AM_I_REG, rx2test, 10 );
 8000c60:	463a      	mov	r2, r7
 8000c62:	230a      	movs	r3, #10
 8000c64:	2175      	movs	r1, #117	; 0x75
 8000c66:	20d0      	movs	r0, #208	; 0xd0
 8000c68:	f7ff fe5c 	bl	8000924 <I2C_SendRequest>
  LL_mDelay(100);
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f000 fd81 	bl	8001774 <LL_mDelay>


  __NOP();
 8000c72:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x74>
	...

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff ff8f 	bl	8000ba0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffa0 	bl	8000bc8 <LL_FLASH_GetLatency>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d1fa      	bne.n	8000c84 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000c8e:	f7ff fea3 	bl	80009d8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c92:	bf00      	nop
 8000c94:	f7ff feae 	bl	80009f4 <LL_RCC_HSE_IsReady>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d1fa      	bne.n	8000c94 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000c9e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000ca2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ca6:	f7ff ff33 	bl	8000b10 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000caa:	f7ff ff11 	bl	8000ad0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ff1c 	bl	8000aec <LL_RCC_PLL_IsReady>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d1fa      	bne.n	8000cb0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fecc 	bl	8000a58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000cc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cc4:	f7ff fedc 	bl	8000a80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff feed 	bl	8000aa8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff fea2 	bl	8000a18 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cd4:	bf00      	nop
 8000cd6:	f7ff feb3 	bl	8000a40 <LL_RCC_GetSysClkSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d1fa      	bne.n	8000cd6 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SystemClock_Config+0x78>)
 8000ce2:	f000 fd39 	bl	8001758 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <SystemClock_Config+0x78>)
 8000ce8:	f000 fd68 	bl	80017bc <LL_SetSystemCoreClock>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	044aa200 	.word	0x044aa200

08000cf4 <LL_I2C_IsActiveFlag_TXE>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	2b80      	cmp	r3, #128	; 0x80
 8000d06:	bf0c      	ite	eq
 8000d08:	2301      	moveq	r3, #1
 8000d0a:	2300      	movne	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <LL_I2C_IsActiveFlag_RXNE>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d28:	2b40      	cmp	r3, #64	; 0x40
 8000d2a:	bf0c      	ite	eq
 8000d2c:	2301      	moveq	r3, #1
 8000d2e:	2300      	movne	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <LL_I2C_IsActiveFlag_SB>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	bf0c      	ite	eq
 8000d50:	2301      	moveq	r3, #1
 8000d52:	2300      	movne	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <LL_I2C_IsActiveFlag_ADDR>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	bf0c      	ite	eq
 8000d74:	2301      	moveq	r3, #1
 8000d76:	2300      	movne	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_I2C_ClearFlag_ADDR>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000d92:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <LL_I2C_AcknowledgeNextData>:
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <LL_I2C_GenerateStartCondition>:
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <LL_I2C_GenerateStopCondition>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	b2db      	uxtb	r3, r3
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	//
	//  After i2cCEV=8, i2c registers are read as long as RXNE is set
	// 	then i2cCEV is set to 0, to finish and disable Read Memory Request
	//

	__NOP();
 8000ea6:	bf00      	nop

	if ( LL_I2C_IsActiveFlag_SB(I2C1) ) {
 8000ea8:	4856      	ldr	r0, [pc, #344]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000eaa:	f7ff ff47 	bl	8000d3c <LL_I2C_IsActiveFlag_SB>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d020      	beq.n	8000ef6 <I2C1_EV_IRQHandler+0x56>

		switch (i2cCEV) {
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d002      	beq.n	8000ec2 <I2C1_EV_IRQHandler+0x22>
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d00d      	beq.n	8000edc <I2C1_EV_IRQHandler+0x3c>
			LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(i2cDevAddr));
			i2cCEV=7;
			break;

		default:
			break;
 8000ec0:	e09b      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
			LL_I2C_TransmitData8( I2C1, I2C_7BIT_ADD_WRITE(i2cDevAddr) );
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <I2C1_EV_IRQHandler+0x16c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	484d      	ldr	r0, [pc, #308]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000ed0:	f7ff ffa5 	bl	8000e1e <LL_I2C_TransmitData8>
			i2cCEV = 3;
 8000ed4:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	701a      	strb	r2, [r3, #0]
			break;
 8000eda:	e08e      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
			LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(i2cDevAddr));
 8000edc:	4b4b      	ldr	r3, [pc, #300]	; (800100c <I2C1_EV_IRQHandler+0x16c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4846      	ldr	r0, [pc, #280]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000eea:	f7ff ff98 	bl	8000e1e <LL_I2C_TransmitData8>
			i2cCEV=7;
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	701a      	strb	r2, [r3, #0]
			break;
 8000ef4:	e081      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
		}


	} else if ( LL_I2C_IsActiveFlag_ADDR(I2C1) ) {
 8000ef6:	4843      	ldr	r0, [pc, #268]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000ef8:	f7ff ff32 	bl	8000d60 <LL_I2C_IsActiveFlag_ADDR>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d023      	beq.n	8000f4a <I2C1_EV_IRQHandler+0xaa>

		switch (i2cCEV) {
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d002      	beq.n	8000f10 <I2C1_EV_IRQHandler+0x70>
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d007      	beq.n	8000f1e <I2C1_EV_IRQHandler+0x7e>
 8000f0e:	e018      	b.n	8000f42 <I2C1_EV_IRQHandler+0xa2>
		case 3:
			LL_I2C_ClearFlag_ADDR(I2C1);
 8000f10:	483c      	ldr	r0, [pc, #240]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f12:	f7ff ff37 	bl	8000d84 <LL_I2C_ClearFlag_ADDR>
			i2cCEV = 4;
 8000f16:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	701a      	strb	r2, [r3, #0]
			break;
 8000f1c:	e06d      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>

		case 7:

			// Disable ack
			LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4838      	ldr	r0, [pc, #224]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f22:	f7ff ff40 	bl	8000da6 <LL_I2C_AcknowledgeNextData>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop

			__disable_irq();

			LL_I2C_ClearFlag_ADDR(I2C1);
 8000f2a:	4836      	ldr	r0, [pc, #216]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f2c:	f7ff ff2a 	bl	8000d84 <LL_I2C_ClearFlag_ADDR>

			LL_I2C_GenerateStopCondition(I2C1);
 8000f30:	4834      	ldr	r0, [pc, #208]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f32:	f7ff ff59 	bl	8000de8 <LL_I2C_GenerateStopCondition>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f36:	b662      	cpsie	i
}
 8000f38:	bf00      	nop

			__enable_irq();


			i2cCEV = 8;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	701a      	strb	r2, [r3, #0]
			break;
 8000f40:	e05b      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>

		default:
			LL_I2C_ClearFlag_ADDR(I2C1);
 8000f42:	4830      	ldr	r0, [pc, #192]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f44:	f7ff ff1e 	bl	8000d84 <LL_I2C_ClearFlag_ADDR>
			break;
 8000f48:	e057      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
		}


	} else if ( LL_I2C_IsActiveFlag_TXE(I2C1) ) {
 8000f4a:	482e      	ldr	r0, [pc, #184]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f4c:	f7ff fed2 	bl	8000cf4 <LL_I2C_IsActiveFlag_TXE>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d017      	beq.n	8000f86 <I2C1_EV_IRQHandler+0xe6>

		switch (i2cCEV) {
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d002      	beq.n	8000f64 <I2C1_EV_IRQHandler+0xc4>
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d00a      	beq.n	8000f78 <I2C1_EV_IRQHandler+0xd8>
			LL_I2C_GenerateStartCondition(I2C1);
			i2cCEV = 6;
			break;

		default:
			break;
 8000f62:	e04a      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
			LL_I2C_TransmitData8( I2C1, I2C_MEM_ADD_LSB(i2cMemAddr) );
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <I2C1_EV_IRQHandler+0x170>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4826      	ldr	r0, [pc, #152]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f6c:	f7ff ff57 	bl	8000e1e <LL_I2C_TransmitData8>
			i2cCEV = 5;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	701a      	strb	r2, [r3, #0]
			break;
 8000f76:	e040      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
			LL_I2C_GenerateStartCondition(I2C1);
 8000f78:	4822      	ldr	r0, [pc, #136]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f7a:	f7ff ff26 	bl	8000dca <LL_I2C_GenerateStartCondition>
			i2cCEV = 6;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f80:	2206      	movs	r2, #6
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e039      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
		}


	} else if ( LL_I2C_IsActiveFlag_RXNE(I2C1) ) {
 8000f86:	481f      	ldr	r0, [pc, #124]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f88:	f7ff fec6 	bl	8000d18 <LL_I2C_IsActiveFlag_RXNE>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d032      	beq.n	8000ff8 <I2C1_EV_IRQHandler+0x158>

		switch (i2cCEV) {
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d128      	bne.n	8000fec <I2C1_EV_IRQHandler+0x14c>

		case 8:

			if ( LL_I2C_IsActiveFlag_RXNE(I2C1) )
 8000f9a:	481a      	ldr	r0, [pc, #104]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000f9c:	f7ff febc 	bl	8000d18 <LL_I2C_IsActiveFlag_RXNE>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d01e      	beq.n	8000fe4 <I2C1_EV_IRQHandler+0x144>
			{

				if ( i2cRxBufferIndex < i2cRxBufferLen  ) {
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <I2C1_EV_IRQHandler+0x174>)
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <I2C1_EV_IRQHandler+0x178>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d212      	bcs.n	8000fd8 <I2C1_EV_IRQHandler+0x138>

					*i2cRxBufferPtr = LL_I2C_ReceiveData8(I2C1);
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <I2C1_EV_IRQHandler+0x17c>)
 8000fb4:	681c      	ldr	r4, [r3, #0]
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000fb8:	f7ff ff25 	bl	8000e06 <LL_I2C_ReceiveData8>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	7023      	strb	r3, [r4, #0]
					i2cRxBufferPtr++;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <I2C1_EV_IRQHandler+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <I2C1_EV_IRQHandler+0x17c>)
 8000fc8:	6013      	str	r3, [r2, #0]

					i2cRxBufferIndex++;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <I2C1_EV_IRQHandler+0x174>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <I2C1_EV_IRQHandler+0x174>)
 8000fd4:	701a      	strb	r2, [r3, #0]
			} else {
				i2cCEV = 0;
				//i2cRxBufferIndex=0;
			}

			break;
 8000fd6:	e010      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
					dum = LL_I2C_ReceiveData8(I2C1);
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000fda:	f7ff ff14 	bl	8000e06 <LL_I2C_ReceiveData8>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
			break;
 8000fe2:	e00a      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
				i2cCEV = 0;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <I2C1_EV_IRQHandler+0x168>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			break;
 8000fea:	e006      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>

		default:
			dum = LL_I2C_ReceiveData8(I2C1);
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <I2C1_EV_IRQHandler+0x164>)
 8000fee:	f7ff ff0a 	bl	8000e06 <LL_I2C_ReceiveData8>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
			break;
 8000ff6:	e000      	b.n	8000ffa <I2C1_EV_IRQHandler+0x15a>
		}



	}
 8000ff8:	bf00      	nop
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	40005400 	.word	0x40005400
 8001008:	20000020 	.word	0x20000020
 800100c:	20000021 	.word	0x20000021
 8001010:	20000022 	.word	0x20000022
 8001014:	20000023 	.word	0x20000023
 8001018:	20000028 	.word	0x20000028
 800101c:	20000024 	.word	0x20000024

08001020 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff fff8 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103e:	490c      	ldr	r1, [pc, #48]	; (8001070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001054:	4c09      	ldr	r4, [pc, #36]	; (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f000 fbb9 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fdcb 	bl	8000c00 <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001074:	08001860 	.word	0x08001860
  ldr r2, =_sbss
 8001078:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800107c:	2000002c 	.word	0x2000002c

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <LL_GPIO_SetPinMode>:
{
 8001082:	b490      	push	{r4, r7}
 8001084:	b088      	sub	sp, #32
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	0e1b      	lsrs	r3, r3, #24
 8001096:	4413      	add	r3, r2
 8001098:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	210f      	movs	r1, #15
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
  return result;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	6023      	str	r3, [r4, #0]
}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc90      	pop	{r4, r7}
 80010e4:	4770      	bx	lr

080010e6 <LL_GPIO_SetPinSpeed>:
{
 80010e6:	b490      	push	{r4, r7}
 80010e8:	b088      	sub	sp, #32
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	4413      	add	r3, r2
 80010fc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	613b      	str	r3, [r7, #16]
  return result;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	2103      	movs	r1, #3
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	61bb      	str	r3, [r7, #24]
  return result;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	6023      	str	r3, [r4, #0]
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bc90      	pop	{r4, r7}
 8001148:	4770      	bx	lr

0800114a <LL_GPIO_SetPinOutputType>:
{
 800114a:	b490      	push	{r4, r7}
 800114c:	b088      	sub	sp, #32
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	461a      	mov	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	0e1b      	lsrs	r3, r3, #24
 800115e:	4413      	add	r3, r2
 8001160:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	613b      	str	r3, [r7, #16]
  return result;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	2104      	movs	r1, #4
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	61bb      	str	r3, [r7, #24]
  return result;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	6023      	str	r3, [r4, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc90      	pop	{r4, r7}
 80011ac:	4770      	bx	lr

080011ae <LL_GPIO_SetPinPull>:
{
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	43db      	mvns	r3, r3
 80011c4:	401a      	ands	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	613b      	str	r3, [r7, #16]
  return result;
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	408b      	lsls	r3, r1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	60fb      	str	r3, [r7, #12]
  return result;
 8001212:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800121c:	e044      	b.n	80012a8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800121e:	2201      	movs	r2, #1
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	409a      	lsls	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03a      	beq.n	80012a2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d806      	bhi.n	8001240 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001232:	f240 1201 	movw	r2, #257	; 0x101
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	e008      	b.n	8001252 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3b08      	subs	r3, #8
 8001244:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001250:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b08      	cmp	r3, #8
 8001258:	d106      	bne.n	8001268 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	461a      	mov	r2, r3
 8001260:	69b9      	ldr	r1, [r7, #24]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa3 	bl	80011ae <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	461a      	mov	r2, r3
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff06 	bl	8001082 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <LL_GPIO_Init+0x94>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b09      	cmp	r3, #9
 8001284:	d10d      	bne.n	80012a2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	461a      	mov	r2, r3
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff29 	bl	80010e6 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	461a      	mov	r2, r3
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff54 	bl	800114a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1b4      	bne.n	800121e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <LL_I2C_Enable>:
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LL_I2C_Disable>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 0201 	bic.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <LL_I2C_SetOwnAddress1>:
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800130e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	430a      	orrs	r2, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	609a      	str	r2, [r3, #8]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_I2C_ConfigSpeed>:
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <LL_I2C_ConfigSpeed+0x120>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	431a      	orrs	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4939      	ldr	r1, [pc, #228]	; (800144c <LL_I2C_ConfigSpeed+0x124>)
 8001366:	428b      	cmp	r3, r1
 8001368:	d802      	bhi.n	8001370 <LL_I2C_ConfigSpeed+0x48>
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3301      	adds	r3, #1
 800136e:	e009      	b.n	8001384 <LL_I2C_ConfigSpeed+0x5c>
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4935      	ldr	r1, [pc, #212]	; (8001450 <LL_I2C_ConfigSpeed+0x128>)
 800137c:	fba1 1303 	umull	r1, r3, r1, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	3301      	adds	r3, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <LL_I2C_ConfigSpeed+0x124>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d939      	bls.n	8001406 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d117      	bne.n	80013c8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c0:	e01d      	b.n	80013fe <LL_I2C_ConfigSpeed+0xd6>
 80013c2:	f248 0301 	movw	r3, #32769	; 0x8001
 80013c6:	e01a      	b.n	80013fe <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009a      	lsls	r2, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f8:	e001      	b.n	80013fe <LL_I2C_ConfigSpeed+0xd6>
 80013fa:	f248 0301 	movw	r3, #32769	; 0x8001
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e011      	b.n	800142a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001414:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
 8001424:	e000      	b.n	8001428 <LL_I2C_ConfigSpeed+0x100>
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8001432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	431a      	orrs	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	61da      	str	r2, [r3, #28]
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	431bde83 	.word	0x431bde83
 800144c:	000186a0 	.word	0x000186a0
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <LL_I2C_SetMode>:
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 021a 	bic.w	r2, r3, #26
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_I2C_AcknowledgeNextData>:
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff18 	bl	80012dc <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f87b 	bl	80015ac <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff31 	bl	8001328 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68d9      	ldr	r1, [r3, #12]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	461a      	mov	r2, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff12 	bl	80012fa <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffb9 	bl	8001454 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff feeb 	bl	80012be <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffc2 	bl	8001478 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <LL_RCC_GetSysClkSource>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <LL_RCC_GetSysClkSource+0x14>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <LL_RCC_GetAHBPrescaler>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <LL_RCC_GetAHBPrescaler+0x14>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000

08001530 <LL_RCC_GetAPB1Prescaler>:
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000

08001548 <LL_RCC_GetAPB2Prescaler>:
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <LL_RCC_GetAPB2Prescaler+0x14>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <LL_RCC_PLL_GetMainSource+0x14>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000

08001578 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000

08001590 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <LL_RCC_PLL_GetPrediv+0x18>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	0c5b      	lsrs	r3, r3, #17
 800159a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015b4:	f000 f820 	bl	80015f8 <RCC_GetSystemClockFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f83e 	bl	8001644 <RCC_GetHCLKClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f84c 	bl	8001670 <RCC_GetPCLK1ClockFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f858 	bl	8001698 <RCC_GetPCLK2ClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60da      	str	r2, [r3, #12]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001602:	f7ff ff7d 	bl	8001500 <LL_RCC_GetSysClkSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b08      	cmp	r3, #8
 800160a:	d00c      	beq.n	8001626 <RCC_GetSystemClockFreq+0x2e>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d80e      	bhi.n	800162e <RCC_GetSystemClockFreq+0x36>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <RCC_GetSystemClockFreq+0x22>
 8001614:	2b04      	cmp	r3, #4
 8001616:	d003      	beq.n	8001620 <RCC_GetSystemClockFreq+0x28>
 8001618:	e009      	b.n	800162e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <RCC_GetSystemClockFreq+0x48>)
 800161c:	607b      	str	r3, [r7, #4]
      break;
 800161e:	e009      	b.n	8001634 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <RCC_GetSystemClockFreq+0x48>)
 8001622:	607b      	str	r3, [r7, #4]
      break;
 8001624:	e006      	b.n	8001634 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001626:	f000 f84b 	bl	80016c0 <RCC_PLL_GetFreqDomain_SYS>
 800162a:	6078      	str	r0, [r7, #4]
      break;
 800162c:	e002      	b.n	8001634 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <RCC_GetSystemClockFreq+0x48>)
 8001630:	607b      	str	r3, [r7, #4]
      break;
 8001632:	bf00      	nop
  }

  return frequency;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	007a1200 	.word	0x007a1200

08001644 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800164c:	f7ff ff64 	bl	8001518 <LL_RCC_GetAHBPrescaler>
 8001650:	4603      	mov	r3, r0
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <RCC_GetHCLKClockFreq+0x28>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	40d3      	lsrs	r3, r2
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08001840 	.word	0x08001840

08001670 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001678:	f7ff ff5a 	bl	8001530 <LL_RCC_GetAPB1Prescaler>
 800167c:	4603      	mov	r3, r0
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <RCC_GetPCLK1ClockFreq+0x24>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	40d3      	lsrs	r3, r2
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08001850 	.word	0x08001850

08001698 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80016a0:	f7ff ff52 	bl	8001548 <LL_RCC_GetAPB2Prescaler>
 80016a4:	4603      	mov	r3, r0
 80016a6:	0adb      	lsrs	r3, r3, #11
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <RCC_GetPCLK2ClockFreq+0x24>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	40d3      	lsrs	r3, r2
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08001850 	.word	0x08001850

080016c0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80016ce:	f7ff ff47 	bl	8001560 <LL_RCC_PLL_GetMainSource>
 80016d2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d003      	beq.n	80016ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80016e2:	e00b      	b.n	80016fc <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80016e6:	607b      	str	r3, [r7, #4]
      break;
 80016e8:	e00b      	b.n	8001702 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80016ea:	f7ff ff51 	bl	8001590 <LL_RCC_PLL_GetPrediv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	607b      	str	r3, [r7, #4]
      break;
 80016fa:	e002      	b.n	8001702 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80016fe:	607b      	str	r3, [r7, #4]
      break;
 8001700:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001702:	f7ff ff39 	bl	8001578 <LL_RCC_PLL_GetMultiplicator>
 8001706:	4603      	mov	r3, r0
 8001708:	0c9b      	lsrs	r3, r3, #18
 800170a:	3302      	adds	r3, #2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	003d0900 	.word	0x003d0900
 8001720:	007a1200 	.word	0x007a1200

08001724 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <LL_InitTick+0x30>)
 8001738:	3b01      	subs	r3, #1
 800173a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_InitTick+0x30>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_InitTick+0x30>)
 8001744:	2205      	movs	r2, #5
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffdd 	bl	8001724 <LL_InitTick>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <LL_mDelay+0x44>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001782:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800178a:	d00c      	beq.n	80017a6 <LL_mDelay+0x32>
  {
    Delay++;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001792:	e008      	b.n	80017a6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <LL_mDelay+0x44>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <LL_mDelay+0x32>
    {
      Delay--;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f3      	bne.n	8001794 <LL_mDelay+0x20>
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e010 	.word	0xe000e010

080017bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <LL_SetSystemCoreClock+0x18>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	2600      	movs	r6, #0
 80017dc:	4d0c      	ldr	r5, [pc, #48]	; (8001810 <__libc_init_array+0x38>)
 80017de:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <__libc_init_array+0x3c>)
 80017e0:	1b64      	subs	r4, r4, r5
 80017e2:	10a4      	asrs	r4, r4, #2
 80017e4:	42a6      	cmp	r6, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	f000 f81a 	bl	8001820 <_init>
 80017ec:	2600      	movs	r6, #0
 80017ee:	4d0a      	ldr	r5, [pc, #40]	; (8001818 <__libc_init_array+0x40>)
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <__libc_init_array+0x44>)
 80017f2:	1b64      	subs	r4, r4, r5
 80017f4:	10a4      	asrs	r4, r4, #2
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001800:	4798      	blx	r3
 8001802:	3601      	adds	r6, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	f855 3b04 	ldr.w	r3, [r5], #4
 800180a:	4798      	blx	r3
 800180c:	3601      	adds	r6, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	08001858 	.word	0x08001858
 8001814:	08001858 	.word	0x08001858
 8001818:	08001858 	.word	0x08001858
 800181c:	0800185c 	.word	0x0800185c

08001820 <_init>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	bf00      	nop
 8001824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001826:	bc08      	pop	{r3}
 8001828:	469e      	mov	lr, r3
 800182a:	4770      	bx	lr

0800182c <_fini>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr
