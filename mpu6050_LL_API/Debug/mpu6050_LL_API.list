
mpu6050_LL_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800180c  0800180c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800180c  0800180c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800180c  0800180c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001818  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001818  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f4a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f18  00000000  00000000  00022f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e8  00000000  00000000  00023e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000450  00000000  00000000  00024378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011930  00000000  00000000  000247c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ebd  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b403  00000000  00000000  00039fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000953b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001354  00000000  00000000  00095408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	080017dc 	.word	0x080017dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	080017dc 	.word	0x080017dc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007c6:	699a      	ldr	r2, [r3, #24]
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007d2:	699a      	ldr	r2, [r3, #24]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80007f0:	2020      	movs	r0, #32
 80007f2:	f7ff ffe3 	bl	80007bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f7ff ffe0 	bl	80007bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f7ff ffdd 	bl	80007bc <LL_APB2_GRP1_EnableClock>

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}

08000806 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 0201 	orr.w	r2, r3, #1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	431a      	orrs	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60da      	str	r2, [r3, #12]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f023 0201 	bic.w	r2, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60da      	str	r2, [r3, #12]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <LL_APB1_GRP1_EnableClock>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ba:	69da      	ldr	r2, [r3, #28]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <LL_APB2_GRP1_EnableClock>:
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ea:	699a      	ldr	r2, [r3, #24]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800092a:	2008      	movs	r0, #8
 800092c:	f7ff ffd2 	bl	80008d4 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000930:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000936:	2309      	movs	r3, #9
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800093e:	2304      	movs	r3, #4
 8000940:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <MX_I2C1_Init+0xa0>)
 8000948:	f000 fc55 	bl	80011f6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800094c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000950:	f7ff ffa8 	bl	80008a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000954:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_I2C1_Init+0xa4>)
 8000956:	f7ff ff95 	bl	8000884 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800095a:	4813      	ldr	r0, [pc, #76]	; (80009a8 <MX_I2C1_Init+0xa4>)
 800095c:	f7ff ff71 	bl	8000842 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_I2C1_Init+0xa4>)
 8000962:	f7ff ff5f 	bl	8000824 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_I2C1_Init+0xa8>)
 800096c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800097c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_I2C1_Init+0xa4>)
 800098a:	f000 fd89 	bl	80014a0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800098e:	2100      	movs	r1, #0
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C1_Init+0xa4>)
 8000992:	f7ff ff65 	bl	8000860 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */




  LL_I2C_Enable(I2C1);
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C1_Init+0xa4>)
 8000998:	f7ff ff35 	bl	8000806 <LL_I2C_Enable>



  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	40005400 	.word	0x40005400
 80009ac:	000186a0 	.word	0x000186a0

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	2b80      	cmp	r3, #128	; 0x80
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2c:	2b40      	cmp	r3, #64	; 0x40
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	b2db      	uxtb	r3, r3
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <LL_RCC_HSE_Enable+0x18>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <LL_RCC_HSE_Enable+0x18>)
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <LL_RCC_HSE_IsReady+0x20>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000

08000bcc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <LL_RCC_SetSysClkSource+0x24>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f023 0203 	bic.w	r2, r3, #3
 8000bdc:	4904      	ldr	r1, [pc, #16]	; (8000bf0 <LL_RCC_SetSysClkSource+0x24>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <LL_RCC_GetSysClkSource+0x14>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	604b      	str	r3, [r1, #4]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c6c:	4904      	ldr	r1, [pc, #16]	; (8000c80 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <LL_RCC_PLL_Enable+0x18>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <LL_RCC_PLL_Enable+0x18>)
 8000c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <LL_RCC_PLL_IsReady+0x20>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	4903      	ldr	r1, [pc, #12]	; (8000cf0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_APB1_GRP1_EnableClock>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cfe:	69da      	ldr	r2, [r3, #28]
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d0a:	69da      	ldr	r2, [r3, #28]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <LL_APB2_GRP1_EnableClock>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <LL_FLASH_SetLatency+0x24>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 0207 	bic.w	r2, r3, #7
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <LL_FLASH_SetLatency+0x24>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <LL_FLASH_GetLatency+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0307 	and.w	r3, r3, #7
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40022000 	.word	0x40022000

08000d94 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	6053      	str	r3, [r2, #4]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40010000 	.word	0x40010000
 8000db4:	00000000 	.word	0x00000000

08000db8 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t data;

	float ax1 = LONG1*0.001;
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fc71 	bl	80006b0 <__aeabi_ul2d>
 8000dce:	a356      	add	r3, pc, #344	; (adr r3, 8000f28 <MPU6050_Init+0x170>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff f9bc 	bl	8000150 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc9c 	bl	800071c <__aeabi_d2f>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
	float ax2 = LONG2*0.001;
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fc5c 	bl	80006b0 <__aeabi_ul2d>
 8000df8:	a34b      	add	r3, pc, #300	; (adr r3, 8000f28 <MPU6050_Init+0x170>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff f9a7 	bl	8000150 <__aeabi_dmul>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff fc87 	bl	800071c <__aeabi_d2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60bb      	str	r3, [r7, #8]
	float ax3 = LONG3*0.001;
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff fc47 	bl	80006b0 <__aeabi_ul2d>
 8000e22:	a341      	add	r3, pc, #260	; (adr r3, 8000f28 <MPU6050_Init+0x170>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff f992 	bl	8000150 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fc72 	bl	800071c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	607b      	str	r3, [r7, #4]
	// Part 1: Send request memory read
	// ----------------------------------------------------------- //


	// Wait for busy flag to clear
	while( (LL_I2C_IsActiveFlag_BUSY(I2C1) == SET) )
 8000e3c:	e000      	b.n	8000e40 <MPU6050_Init+0x88>
	{
		__NOP();
 8000e3e:	bf00      	nop
	while( (LL_I2C_IsActiveFlag_BUSY(I2C1) == SET) )
 8000e40:	483b      	ldr	r0, [pc, #236]	; (8000f30 <MPU6050_Init+0x178>)
 8000e42:	f7ff fe21 	bl	8000a88 <LL_I2C_IsActiveFlag_BUSY>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <MPU6050_Init+0x86>
	}

	// Disable POS
	LL_I2C_DisableBitPOS(I2C1);
 8000e4c:	4838      	ldr	r0, [pc, #224]	; (8000f30 <MPU6050_Init+0x178>)
 8000e4e:	f7ff fe6e 	bl	8000b2e <LL_I2C_DisableBitPOS>


	// Enable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
 8000e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e56:	4836      	ldr	r0, [pc, #216]	; (8000f30 <MPU6050_Init+0x178>)
 8000e58:	f7ff fe39 	bl	8000ace <LL_I2C_AcknowledgeNextData>


	// Generate start condition
	//
	LL_I2C_GenerateStartCondition(I2C1);
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <MPU6050_Init+0x178>)
 8000e5e:	f7ff fe48 	bl	8000af2 <LL_I2C_GenerateStartCondition>

	// Wait for register to react
	//
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000e62:	e000      	b.n	8000e66 <MPU6050_Init+0xae>
	{
		__NOP();
 8000e64:	bf00      	nop
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000e66:	4832      	ldr	r0, [pc, #200]	; (8000f30 <MPU6050_Init+0x178>)
 8000e68:	f7ff fdea 	bl	8000a40 <LL_I2C_IsActiveFlag_SB>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d1f8      	bne.n	8000e64 <MPU6050_Init+0xac>
	}

	// Send Address
	//

	LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_WRITE(MPU6050_ADDR));
 8000e72:	21d0      	movs	r1, #208	; 0xd0
 8000e74:	482e      	ldr	r0, [pc, #184]	; (8000f30 <MPU6050_Init+0x178>)
 8000e76:	f7ff fe75 	bl	8000b64 <LL_I2C_TransmitData8>


	// Wait for register to react
	//
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 8000e7a:	e000      	b.n	8000e7e <MPU6050_Init+0xc6>
	{
		__NOP();
 8000e7c:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 8000e7e:	482c      	ldr	r0, [pc, #176]	; (8000f30 <MPU6050_Init+0x178>)
 8000e80:	f7ff fdf0 	bl	8000a64 <LL_I2C_IsActiveFlag_ADDR>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d1f8      	bne.n	8000e7c <MPU6050_Init+0xc4>
	}


	LL_I2C_ClearFlag_ADDR(I2C1);
 8000e8a:	4829      	ldr	r0, [pc, #164]	; (8000f30 <MPU6050_Init+0x178>)
 8000e8c:	f7ff fe0e 	bl	8000aac <LL_I2C_ClearFlag_ADDR>


	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 8000e90:	e000      	b.n	8000e94 <MPU6050_Init+0xdc>
	{
		__NOP();
 8000e92:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 8000e94:	4826      	ldr	r0, [pc, #152]	; (8000f30 <MPU6050_Init+0x178>)
 8000e96:	f7ff fdaf 	bl	80009f8 <LL_I2C_IsActiveFlag_TXE>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d1f8      	bne.n	8000e92 <MPU6050_Init+0xda>
	}


	LL_I2C_TransmitData8(I2C1, I2C_MEM_ADD_LSB(WHO_AM_I_REG));
 8000ea0:	2175      	movs	r1, #117	; 0x75
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <MPU6050_Init+0x178>)
 8000ea4:	f7ff fe5e 	bl	8000b64 <LL_I2C_TransmitData8>


	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 8000ea8:	e000      	b.n	8000eac <MPU6050_Init+0xf4>
	{
		__NOP();
 8000eaa:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <MPU6050_Init+0x178>)
 8000eae:	f7ff fda3 	bl	80009f8 <LL_I2C_IsActiveFlag_TXE>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d1f8      	bne.n	8000eaa <MPU6050_Init+0xf2>
	}


	LL_I2C_GenerateStartCondition(I2C1);
 8000eb8:	481d      	ldr	r0, [pc, #116]	; (8000f30 <MPU6050_Init+0x178>)
 8000eba:	f7ff fe1a 	bl	8000af2 <LL_I2C_GenerateStartCondition>


	// Wait for register to react
	//
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000ebe:	e000      	b.n	8000ec2 <MPU6050_Init+0x10a>
	{
		__NOP();
 8000ec0:	bf00      	nop
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000ec2:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MPU6050_Init+0x178>)
 8000ec4:	f7ff fdbc 	bl	8000a40 <LL_I2C_IsActiveFlag_SB>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1f8      	bne.n	8000ec0 <MPU6050_Init+0x108>
	}


	LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(MPU6050_ADDR));
 8000ece:	21d1      	movs	r1, #209	; 0xd1
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <MPU6050_Init+0x178>)
 8000ed2:	f7ff fe47 	bl	8000b64 <LL_I2C_TransmitData8>


	// Wait for register to react
	//
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 8000ed6:	e000      	b.n	8000eda <MPU6050_Init+0x122>
	{
		__NOP();
 8000ed8:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 8000eda:	4815      	ldr	r0, [pc, #84]	; (8000f30 <MPU6050_Init+0x178>)
 8000edc:	f7ff fdc2 	bl	8000a64 <LL_I2C_IsActiveFlag_ADDR>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d1f8      	bne.n	8000ed8 <MPU6050_Init+0x120>
	// Part 2: Read
	// ----------------------------------------------------------- //

	// DIsable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MPU6050_Init+0x178>)
 8000eea:	f7ff fdf0 	bl	8000ace <LL_I2C_AcknowledgeNextData>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eee:	b672      	cpsid	i
}
 8000ef0:	bf00      	nop


	__disable_irq();


	LL_I2C_ClearFlag_ADDR(I2C1);
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <MPU6050_Init+0x178>)
 8000ef4:	f7ff fdda 	bl	8000aac <LL_I2C_ClearFlag_ADDR>


	LL_I2C_GenerateStopCondition(I2C1);
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MPU6050_Init+0x178>)
 8000efa:	f7ff fe09 	bl	8000b10 <LL_I2C_GenerateStopCondition>
  __ASM volatile ("cpsie i" : : : "memory");
 8000efe:	b662      	cpsie	i
}
 8000f00:	bf00      	nop


	__enable_irq();

	while( ! (LL_I2C_IsActiveFlag_RXNE(I2C1) == SET) )
 8000f02:	e000      	b.n	8000f06 <MPU6050_Init+0x14e>
	{
		__NOP();
 8000f04:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_RXNE(I2C1) == SET) )
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <MPU6050_Init+0x178>)
 8000f08:	f7ff fd88 	bl	8000a1c <LL_I2C_IsActiveFlag_RXNE>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d1f8      	bne.n	8000f04 <MPU6050_Init+0x14c>
	}


	uint8_t result = LL_I2C_ReceiveData8(I2C1);
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MPU6050_Init+0x178>)
 8000f14:	f7ff fe1a 	bl	8000b4c <LL_I2C_ReceiveData8>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	70fb      	strb	r3, [r7, #3]

	__NOP();
 8000f1c:	bf00      	nop
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
	}
*/


}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f2c:	3f50624d 	.word	0x3f50624d
 8000f30:	40005400 	.word	0x40005400

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fef3 	bl	8000d24 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f42:	f7ff fed7 	bl	8000cf4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f7ff fd32 	bl	80009b0 <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000f4c:	f7ff ff22 	bl	8000d94 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f808 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f7ff fc4a 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f58:	f7ff fcd4 	bl	8000904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  MPU6050_Init();
 8000f5c:	f7ff ff2c 	bl	8000db8 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <main+0x2c>
	...

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff fef3 	bl	8000d54 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ff04 	bl	8000d7c <LL_FLASH_GetLatency>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d1fa      	bne.n	8000f70 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000f7a:	f7ff fe07 	bl	8000b8c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000f7e:	bf00      	nop
 8000f80:	f7ff fe12 	bl	8000ba8 <LL_RCC_HSE_IsReady>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d1fa      	bne.n	8000f80 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000f8a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000f8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f92:	f7ff fe97 	bl	8000cc4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f96:	f7ff fe75 	bl	8000c84 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff fe80 	bl	8000ca0 <LL_RCC_PLL_IsReady>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1fa      	bne.n	8000f9c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe30 	bl	8000c0c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000fac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fb0:	f7ff fe40 	bl	8000c34 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fe51 	bl	8000c5c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fe06 	bl	8000bcc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000fc0:	bf00      	nop
 8000fc2:	f7ff fe17 	bl	8000bf4 <LL_RCC_GetSysClkSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d1fa      	bne.n	8000fc2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <SystemClock_Config+0x78>)
 8000fce:	f000 fbc5 	bl	800175c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <SystemClock_Config+0x78>)
 8000fd4:	f000 fbd0 	bl	8001778 <LL_SetSystemCoreClock>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	044aa200 	.word	0x044aa200

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800103c:	f7ff fff7 	bl	800102e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001042:	490c      	ldr	r1, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001058:	4c09      	ldr	r4, [pc, #36]	; (8001080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f000 fb95 	bl	8001794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff ff63 	bl	8000f34 <main>
  bx lr
 800106e:	4770      	bx	lr
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001078:	08001814 	.word	0x08001814
  ldr r2, =_sbss
 800107c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001080:	20000020 	.word	0x20000020

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>

08001086 <LL_GPIO_SetPinMode>:
{
 8001086:	b490      	push	{r4, r7}
 8001088:	b088      	sub	sp, #32
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	0e1b      	lsrs	r3, r3, #24
 800109a:	4413      	add	r3, r2
 800109c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	210f      	movs	r1, #15
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	61bb      	str	r3, [r7, #24]
  return result;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	6023      	str	r3, [r4, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc90      	pop	{r4, r7}
 80010e8:	4770      	bx	lr

080010ea <LL_GPIO_SetPinSpeed>:
{
 80010ea:	b490      	push	{r4, r7}
 80010ec:	b088      	sub	sp, #32
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0e1b      	lsrs	r3, r3, #24
 80010fe:	4413      	add	r3, r2
 8001100:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	613b      	str	r3, [r7, #16]
  return result;
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	2103      	movs	r1, #3
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	401a      	ands	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	61bb      	str	r3, [r7, #24]
  return result;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	6023      	str	r3, [r4, #0]
}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bc90      	pop	{r4, r7}
 800114c:	4770      	bx	lr

0800114e <LL_GPIO_SetPinOutputType>:
{
 800114e:	b490      	push	{r4, r7}
 8001150:	b088      	sub	sp, #32
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	0e1b      	lsrs	r3, r3, #24
 8001162:	4413      	add	r3, r2
 8001164:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	613b      	str	r3, [r7, #16]
  return result;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	2104      	movs	r1, #4
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	61bb      	str	r3, [r7, #24]
  return result;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	6023      	str	r3, [r4, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc90      	pop	{r4, r7}
 80011b0:	4770      	bx	lr

080011b2 <LL_GPIO_SetPinPull>:
{
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	613b      	str	r3, [r7, #16]
  return result;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	408b      	lsls	r3, r1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b088      	sub	sp, #32
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	60fb      	str	r3, [r7, #12]
  return result;
 8001216:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001220:	e044      	b.n	80012ac <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001222:	2201      	movs	r2, #1
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	409a      	lsls	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03a      	beq.n	80012a6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d806      	bhi.n	8001244 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001236:	f240 1201 	movw	r2, #257	; 0x101
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e008      	b.n	8001256 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3b08      	subs	r3, #8
 8001248:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001254:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d106      	bne.n	800126c <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	461a      	mov	r2, r3
 8001264:	69b9      	ldr	r1, [r7, #24]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa3 	bl	80011b2 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	461a      	mov	r2, r3
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff06 	bl	8001086 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d003      	beq.n	800128a <LL_GPIO_Init+0x94>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b09      	cmp	r3, #9
 8001288:	d10d      	bne.n	80012a6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	461a      	mov	r2, r3
 8001290:	69b9      	ldr	r1, [r7, #24]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff29 	bl	80010ea <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	461a      	mov	r2, r3
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff54 	bl	800114e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1b4      	bne.n	8001222 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <LL_I2C_Enable>:
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <LL_I2C_Disable>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 0201 	bic.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_I2C_SetOwnAddress1>:
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	430a      	orrs	r2, r1
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	609a      	str	r2, [r3, #8]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LL_I2C_ConfigSpeed>:
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <LL_I2C_ConfigSpeed+0x120>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <LL_I2C_ConfigSpeed+0x124>)
 800136a:	428b      	cmp	r3, r1
 800136c:	d802      	bhi.n	8001374 <LL_I2C_ConfigSpeed+0x48>
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	3301      	adds	r3, #1
 8001372:	e009      	b.n	8001388 <LL_I2C_ConfigSpeed+0x5c>
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4935      	ldr	r1, [pc, #212]	; (8001454 <LL_I2C_ConfigSpeed+0x128>)
 8001380:	fba1 1303 	umull	r1, r3, r1, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	3301      	adds	r3, #1
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <LL_I2C_ConfigSpeed+0x124>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d939      	bls.n	800140a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d117      	bne.n	80013cc <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c4:	e01d      	b.n	8001402 <LL_I2C_ConfigSpeed+0xd6>
 80013c6:	f248 0301 	movw	r3, #32769	; 0x8001
 80013ca:	e01a      	b.n	8001402 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	009a      	lsls	r2, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009a      	lsls	r2, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80013f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fc:	e001      	b.n	8001402 <LL_I2C_ConfigSpeed+0xd6>
 80013fe:	f248 0301 	movw	r3, #32769	; 0x8001
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e011      	b.n	800142e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	fbb2 f2f3 	udiv	r2, r2, r3
 8001414:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001418:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	e000      	b.n	800142c <LL_I2C_ConfigSpeed+0x100>
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8001436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	431a      	orrs	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	61da      	str	r2, [r3, #28]
}
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	431bde83 	.word	0x431bde83
 8001450:	000186a0 	.word	0x000186a0
 8001454:	10624dd3 	.word	0x10624dd3

08001458 <LL_I2C_SetMode>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 021a 	bic.w	r2, r3, #26
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <LL_I2C_AcknowledgeNextData>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff18 	bl	80012e0 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f87b 	bl	80015b0 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80014ba:	6939      	ldr	r1, [r7, #16]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff31 	bl	800132c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68d9      	ldr	r1, [r3, #12]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	461a      	mov	r2, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff12 	bl	80012fe <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffb9 	bl	8001458 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff feeb 	bl	80012c2 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffc2 	bl	800147c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <LL_RCC_GetSysClkSource>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <LL_RCC_GetSysClkSource+0x14>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000

0800151c <LL_RCC_GetAHBPrescaler>:
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <LL_RCC_GetAHBPrescaler+0x14>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000

08001534 <LL_RCC_GetAPB1Prescaler>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <LL_RCC_GetAPB1Prescaler+0x14>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <LL_RCC_GetAPB2Prescaler>:
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <LL_RCC_PLL_GetMainSource+0x14>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000

08001594 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <LL_RCC_PLL_GetPrediv+0x18>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c5b      	lsrs	r3, r3, #17
 800159e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015b8:	f000 f820 	bl	80015fc <RCC_GetSystemClockFreq>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f83e 	bl	8001648 <RCC_GetHCLKClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f84c 	bl	8001674 <RCC_GetPCLK1ClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f858 	bl	800169c <RCC_GetPCLK2ClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60da      	str	r2, [r3, #12]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001606:	f7ff ff7d 	bl	8001504 <LL_RCC_GetSysClkSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b08      	cmp	r3, #8
 800160e:	d00c      	beq.n	800162a <RCC_GetSystemClockFreq+0x2e>
 8001610:	2b08      	cmp	r3, #8
 8001612:	d80e      	bhi.n	8001632 <RCC_GetSystemClockFreq+0x36>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <RCC_GetSystemClockFreq+0x22>
 8001618:	2b04      	cmp	r3, #4
 800161a:	d003      	beq.n	8001624 <RCC_GetSystemClockFreq+0x28>
 800161c:	e009      	b.n	8001632 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <RCC_GetSystemClockFreq+0x48>)
 8001620:	607b      	str	r3, [r7, #4]
      break;
 8001622:	e009      	b.n	8001638 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <RCC_GetSystemClockFreq+0x48>)
 8001626:	607b      	str	r3, [r7, #4]
      break;
 8001628:	e006      	b.n	8001638 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800162a:	f000 f84b 	bl	80016c4 <RCC_PLL_GetFreqDomain_SYS>
 800162e:	6078      	str	r0, [r7, #4]
      break;
 8001630:	e002      	b.n	8001638 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <RCC_GetSystemClockFreq+0x48>)
 8001634:	607b      	str	r3, [r7, #4]
      break;
 8001636:	bf00      	nop
  }

  return frequency;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	007a1200 	.word	0x007a1200

08001648 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001650:	f7ff ff64 	bl	800151c <LL_RCC_GetAHBPrescaler>
 8001654:	4603      	mov	r3, r0
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <RCC_GetHCLKClockFreq+0x28>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	40d3      	lsrs	r3, r2
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	080017f4 	.word	0x080017f4

08001674 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800167c:	f7ff ff5a 	bl	8001534 <LL_RCC_GetAPB1Prescaler>
 8001680:	4603      	mov	r3, r0
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <RCC_GetPCLK1ClockFreq+0x24>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	40d3      	lsrs	r3, r2
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08001804 	.word	0x08001804

0800169c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80016a4:	f7ff ff52 	bl	800154c <LL_RCC_GetAPB2Prescaler>
 80016a8:	4603      	mov	r3, r0
 80016aa:	0adb      	lsrs	r3, r3, #11
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <RCC_GetPCLK2ClockFreq+0x24>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	40d3      	lsrs	r3, r2
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	08001804 	.word	0x08001804

080016c4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80016d2:	f7ff ff47 	bl	8001564 <LL_RCC_PLL_GetMainSource>
 80016d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d003      	beq.n	80016ee <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80016e6:	e00b      	b.n	8001700 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80016ea:	607b      	str	r3, [r7, #4]
      break;
 80016ec:	e00b      	b.n	8001706 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80016ee:	f7ff ff51 	bl	8001594 <LL_RCC_PLL_GetPrediv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	3301      	adds	r3, #1
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
      break;
 80016fe:	e002      	b.n	8001706 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001702:	607b      	str	r3, [r7, #4]
      break;
 8001704:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001706:	f7ff ff39 	bl	800157c <LL_RCC_PLL_GetMultiplicator>
 800170a:	4603      	mov	r3, r0
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	3302      	adds	r3, #2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	003d0900 	.word	0x003d0900
 8001724:	007a1200 	.word	0x007a1200

08001728 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <LL_InitTick+0x30>)
 800173c:	3b01      	subs	r3, #1
 800173e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <LL_InitTick+0x30>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <LL_InitTick+0x30>)
 8001748:	2205      	movs	r2, #5
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffdd 	bl	8001728 <LL_InitTick>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <LL_SetSystemCoreClock+0x18>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	20000000 	.word	0x20000000

08001794 <__libc_init_array>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	2600      	movs	r6, #0
 8001798:	4d0c      	ldr	r5, [pc, #48]	; (80017cc <__libc_init_array+0x38>)
 800179a:	4c0d      	ldr	r4, [pc, #52]	; (80017d0 <__libc_init_array+0x3c>)
 800179c:	1b64      	subs	r4, r4, r5
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	42a6      	cmp	r6, r4
 80017a2:	d109      	bne.n	80017b8 <__libc_init_array+0x24>
 80017a4:	f000 f81a 	bl	80017dc <_init>
 80017a8:	2600      	movs	r6, #0
 80017aa:	4d0a      	ldr	r5, [pc, #40]	; (80017d4 <__libc_init_array+0x40>)
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <__libc_init_array+0x44>)
 80017ae:	1b64      	subs	r4, r4, r5
 80017b0:	10a4      	asrs	r4, r4, #2
 80017b2:	42a6      	cmp	r6, r4
 80017b4:	d105      	bne.n	80017c2 <__libc_init_array+0x2e>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017bc:	4798      	blx	r3
 80017be:	3601      	adds	r6, #1
 80017c0:	e7ee      	b.n	80017a0 <__libc_init_array+0xc>
 80017c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c6:	4798      	blx	r3
 80017c8:	3601      	adds	r6, #1
 80017ca:	e7f2      	b.n	80017b2 <__libc_init_array+0x1e>
 80017cc:	0800180c 	.word	0x0800180c
 80017d0:	0800180c 	.word	0x0800180c
 80017d4:	0800180c 	.word	0x0800180c
 80017d8:	08001810 	.word	0x08001810

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	bf00      	nop
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	bf00      	nop
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
