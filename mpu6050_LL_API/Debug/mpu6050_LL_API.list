
mpu6050_LL_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001038  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800115c  0800115c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800115c  0800115c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800115c  0800115c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800115c  0800115c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001160  08001160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001168  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001168  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031f0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fae  00000000  00000000  0002321d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  000241d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011930  00000000  00000000  00024b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004051  00000000  00000000  000364b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b440  00000000  00000000  0003a509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001390  00000000  00000000  0009599c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800112c 	.word	0x0800112c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800112c 	.word	0x0800112c

0800014c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	4907      	ldr	r1, [pc, #28]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4313      	orrs	r3, r2
 800015e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000162:	699a      	ldr	r2, [r3, #24]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4013      	ands	r3, r2
 8000168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	bf00      	nop
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	40021000 	.word	0x40021000

0800017c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000180:	2020      	movs	r0, #32
 8000182:	f7ff ffe3 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000186:	2004      	movs	r0, #4
 8000188:	f7ff ffe0 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800018c:	2008      	movs	r0, #8
 800018e:	f7ff ffdd 	bl	800014c <LL_APB2_GRP1_EnableClock>

}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}

08000196 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000196:	b480      	push	{r7}
 8000198:	b083      	sub	sp, #12
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f043 0201 	orr.w	r2, r3, #1
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	601a      	str	r2, [r3, #0]
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	601a      	str	r2, [r3, #0]
}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr

080001d2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80001d2:	b480      	push	{r7}
 80001d4:	b083      	sub	sp, #12
 80001d6:	af00      	add	r7, sp, #0
 80001d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	68db      	ldr	r3, [r3, #12]
 80001fe:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	431a      	orrs	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	60da      	str	r2, [r3, #12]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	f023 0201 	bic.w	r2, r3, #1
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60da      	str	r2, [r3, #12]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
	...

08000234 <LL_APB1_GRP1_EnableClock>:
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800023e:	69da      	ldr	r2, [r3, #28]
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800024a:	69da      	ldr	r2, [r3, #28]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4013      	ands	r3, r2
 8000250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000252:	68fb      	ldr	r3, [r7, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000

08000264 <LL_APB2_GRP1_EnableClock>:
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <LL_APB2_GRP1_EnableClock+0x2c>)
 800026e:	699a      	ldr	r2, [r3, #24]
 8000270:	4907      	ldr	r1, [pc, #28]	; (8000290 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4313      	orrs	r3, r2
 8000276:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <LL_APB2_GRP1_EnableClock+0x2c>)
 800027a:	699a      	ldr	r2, [r3, #24]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4013      	ands	r3, r2
 8000280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000282:	68fb      	ldr	r3, [r7, #12]
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08c      	sub	sp, #48	; 0x30
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80002ba:	2008      	movs	r0, #8
 80002bc:	f7ff ffd2 	bl	8000264 <LL_APB2_GRP1_EnableClock>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80002c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80002c4:	f7ff ffb6 	bl	8000234 <LL_APB1_GRP1_EnableClock>

  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80002c8:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 80002cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80002ce:	2309      	movs	r3, #9
 80002d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80002d2:	2303      	movs	r3, #3
 80002d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80002d6:	2304      	movs	r3, #4
 80002d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4815      	ldr	r0, [pc, #84]	; (8000334 <MX_I2C1_Init+0xa0>)
 80002e0:	f000 fc0d 	bl	8000afe <LL_GPIO_Init>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80002e4:	4814      	ldr	r0, [pc, #80]	; (8000338 <MX_I2C1_Init+0xa4>)
 80002e6:	f7ff ff95 	bl	8000214 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80002ea:	4813      	ldr	r0, [pc, #76]	; (8000338 <MX_I2C1_Init+0xa4>)
 80002ec:	f7ff ff71 	bl	80001d2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80002f0:	4811      	ldr	r0, [pc, #68]	; (8000338 <MX_I2C1_Init+0xa4>)
 80002f2:	f7ff ff5f 	bl	80001b4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_I2C1_Init+0xa8>)
 80002fc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80002fe:	2300      	movs	r3, #0
 8000300:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800030c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000310:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	4619      	mov	r1, r3
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <MX_I2C1_Init+0xa4>)
 800031a:	f000 fd45 	bl	8000da8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800031e:	2100      	movs	r1, #0
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_I2C1_Init+0xa4>)
 8000322:	f7ff ff65 	bl	80001f0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */


  //I2C_ErrataWorkaround();

  LL_I2C_Enable(I2C1);
 8000326:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_I2C1_Init+0xa4>)
 8000328:	f7ff ff35 	bl	8000196 <LL_I2C_Enable>



  /* USER CODE END I2C1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3730      	adds	r7, #48	; 0x30
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010c00 	.word	0x40010c00
 8000338:	40005400 	.word	0x40005400
 800033c:	000186a0 	.word	0x000186a0

08000340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800035c:	4013      	ands	r3, r2
 800035e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	60d3      	str	r3, [r2, #12]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000398:	2b80      	cmp	r3, #128	; 0x80
 800039a:	bf0c      	ite	eq
 800039c:	2301      	moveq	r3, #1
 800039e:	2300      	movne	r3, #0
 80003a0:	b2db      	uxtb	r3, r3
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003bc:	2b40      	cmp	r3, #64	; 0x40
 80003be:	bf0c      	ite	eq
 80003c0:	2301      	moveq	r3, #1
 80003c2:	2300      	movne	r3, #0
 80003c4:	b2db      	uxtb	r3, r3
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	bf0c      	ite	eq
 80003e4:	2301      	moveq	r3, #1
 80003e6:	2300      	movne	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0302 	and.w	r3, r3, #2
 8000404:	2b02      	cmp	r3, #2
 8000406:	bf0c      	ite	eq
 8000408:	2301      	moveq	r3, #1
 800040a:	2300      	movne	r3, #0
 800040c:	b2db      	uxtb	r3, r3
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b02      	cmp	r3, #2
 800042a:	bf0c      	ite	eq
 800042c:	2301      	moveq	r3, #1
 800042e:	2300      	movne	r3, #0
 8000430:	b2db      	uxtb	r3, r3
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800044a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	431a      	orrs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	611a      	str	r2, [r3, #16]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <LL_RCC_HSE_Enable+0x18>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <LL_RCC_HSE_Enable+0x18>)
 8000526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_RCC_HSE_IsReady+0x20>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LL_RCC_SetSysClkSource+0x24>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f023 0203 	bic.w	r2, r3, #3
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <LL_RCC_SetSysClkSource+0x24>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	604b      	str	r3, [r1, #4]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <LL_RCC_GetSysClkSource+0x14>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005ac:	4904      	ldr	r1, [pc, #16]	; (80005c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	604b      	str	r3, [r1, #4]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	604b      	str	r3, [r1, #4]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005fc:	4904      	ldr	r1, [pc, #16]	; (8000610 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	604b      	str	r3, [r1, #4]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <LL_RCC_PLL_Enable+0x18>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <LL_RCC_PLL_Enable+0x18>)
 800061e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <LL_RCC_PLL_IsReady+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800063c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000640:	bf0c      	ite	eq
 8000642:	2301      	moveq	r3, #1
 8000644:	2300      	movne	r3, #0
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	430b      	orrs	r3, r1
 8000670:	4903      	ldr	r1, [pc, #12]	; (8000680 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000672:	4313      	orrs	r3, r2
 8000674:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000

08000684 <LL_APB1_GRP1_EnableClock>:
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800068e:	69da      	ldr	r2, [r3, #28]
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4313      	orrs	r3, r2
 8000696:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800069a:	69da      	ldr	r2, [r3, #28]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <LL_APB2_GRP1_EnableClock>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <LL_FLASH_SetLatency+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f023 0207 	bic.w	r2, r3, #7
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_FLASH_SetLatency+0x24>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	600b      	str	r3, [r1, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <LL_FLASH_GetLatency+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0307 	and.w	r3, r3, #7
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40022000 	.word	0x40022000

08000724 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000736:	6053      	str	r3, [r2, #4]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40010000 	.word	0x40010000

08000744 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	// Part 1: Send request memory read
	// ----------------------------------------------------------- //


	// Wait for busy flag to clear
	while( (LL_I2C_IsActiveFlag_BUSY(I2C1) == SET) )
 800074a:	e000      	b.n	800074e <MPU6050_Init+0xa>
	{
		__NOP();
 800074c:	bf00      	nop
	while( (LL_I2C_IsActiveFlag_BUSY(I2C1) == SET) )
 800074e:	4839      	ldr	r0, [pc, #228]	; (8000834 <MPU6050_Init+0xf0>)
 8000750:	f7ff fe62 	bl	8000418 <LL_I2C_IsActiveFlag_BUSY>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d0f8      	beq.n	800074c <MPU6050_Init+0x8>
	}

	// Disable POS
	LL_I2C_DisableBitPOS(I2C1);
 800075a:	4836      	ldr	r0, [pc, #216]	; (8000834 <MPU6050_Init+0xf0>)
 800075c:	f7ff feaf 	bl	80004be <LL_I2C_DisableBitPOS>


	// Enable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
 8000760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000764:	4833      	ldr	r0, [pc, #204]	; (8000834 <MPU6050_Init+0xf0>)
 8000766:	f7ff fe7a 	bl	800045e <LL_I2C_AcknowledgeNextData>


	// Generate start condition
	//
	LL_I2C_GenerateStartCondition(I2C1);
 800076a:	4832      	ldr	r0, [pc, #200]	; (8000834 <MPU6050_Init+0xf0>)
 800076c:	f7ff fe89 	bl	8000482 <LL_I2C_GenerateStartCondition>

	// Wait for register to react
	//
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000770:	e000      	b.n	8000774 <MPU6050_Init+0x30>
	{
		__NOP();
 8000772:	bf00      	nop
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 8000774:	482f      	ldr	r0, [pc, #188]	; (8000834 <MPU6050_Init+0xf0>)
 8000776:	f7ff fe2b 	bl	80003d0 <LL_I2C_IsActiveFlag_SB>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d1f8      	bne.n	8000772 <MPU6050_Init+0x2e>
	}

	// Send Address
	//

	LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_WRITE(MPU6050_ADDR));
 8000780:	21d0      	movs	r1, #208	; 0xd0
 8000782:	482c      	ldr	r0, [pc, #176]	; (8000834 <MPU6050_Init+0xf0>)
 8000784:	f7ff feb6 	bl	80004f4 <LL_I2C_TransmitData8>


	// Wait for register to react
	//
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 8000788:	e000      	b.n	800078c <MPU6050_Init+0x48>
	{
		__NOP();
 800078a:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <MPU6050_Init+0xf0>)
 800078e:	f7ff fe31 	bl	80003f4 <LL_I2C_IsActiveFlag_ADDR>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d1f8      	bne.n	800078a <MPU6050_Init+0x46>
	}


	LL_I2C_ClearFlag_ADDR(I2C1);
 8000798:	4826      	ldr	r0, [pc, #152]	; (8000834 <MPU6050_Init+0xf0>)
 800079a:	f7ff fe4f 	bl	800043c <LL_I2C_ClearFlag_ADDR>


	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 800079e:	e000      	b.n	80007a2 <MPU6050_Init+0x5e>
	{
		__NOP();
 80007a0:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 80007a2:	4824      	ldr	r0, [pc, #144]	; (8000834 <MPU6050_Init+0xf0>)
 80007a4:	f7ff fdf0 	bl	8000388 <LL_I2C_IsActiveFlag_TXE>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d1f8      	bne.n	80007a0 <MPU6050_Init+0x5c>
	}


	LL_I2C_TransmitData8(I2C1, I2C_MEM_ADD_LSB(WHO_AM_I_REG));
 80007ae:	2175      	movs	r1, #117	; 0x75
 80007b0:	4820      	ldr	r0, [pc, #128]	; (8000834 <MPU6050_Init+0xf0>)
 80007b2:	f7ff fe9f 	bl	80004f4 <LL_I2C_TransmitData8>


	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 80007b6:	e000      	b.n	80007ba <MPU6050_Init+0x76>
	{
		__NOP();
 80007b8:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_TXE(I2C1) == SET) )
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <MPU6050_Init+0xf0>)
 80007bc:	f7ff fde4 	bl	8000388 <LL_I2C_IsActiveFlag_TXE>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d1f8      	bne.n	80007b8 <MPU6050_Init+0x74>
	}


	LL_I2C_GenerateStartCondition(I2C1);
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <MPU6050_Init+0xf0>)
 80007c8:	f7ff fe5b 	bl	8000482 <LL_I2C_GenerateStartCondition>


	// Wait for register to react
	//
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 80007cc:	e000      	b.n	80007d0 <MPU6050_Init+0x8c>
	{
		__NOP();
 80007ce:	bf00      	nop
	while ( ! (LL_I2C_IsActiveFlag_SB(I2C1) == SET) )
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MPU6050_Init+0xf0>)
 80007d2:	f7ff fdfd 	bl	80003d0 <LL_I2C_IsActiveFlag_SB>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d1f8      	bne.n	80007ce <MPU6050_Init+0x8a>
	}


	LL_I2C_TransmitData8(I2C1, I2C_7BIT_ADD_READ(MPU6050_ADDR));
 80007dc:	21d1      	movs	r1, #209	; 0xd1
 80007de:	4815      	ldr	r0, [pc, #84]	; (8000834 <MPU6050_Init+0xf0>)
 80007e0:	f7ff fe88 	bl	80004f4 <LL_I2C_TransmitData8>


	// Wait for register to react
	//
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 80007e4:	e000      	b.n	80007e8 <MPU6050_Init+0xa4>
	{
		__NOP();
 80007e6:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_ADDR(I2C1) == SET) )
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <MPU6050_Init+0xf0>)
 80007ea:	f7ff fe03 	bl	80003f4 <LL_I2C_IsActiveFlag_ADDR>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d1f8      	bne.n	80007e6 <MPU6050_Init+0xa2>
	// Part 2: Read
	// ----------------------------------------------------------- //

	// DIsable acknowledge
	//
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80007f4:	2100      	movs	r1, #0
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <MPU6050_Init+0xf0>)
 80007f8:	f7ff fe31 	bl	800045e <LL_I2C_AcknowledgeNextData>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop


	__disable_irq();


	LL_I2C_ClearFlag_ADDR(I2C1);
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <MPU6050_Init+0xf0>)
 8000802:	f7ff fe1b 	bl	800043c <LL_I2C_ClearFlag_ADDR>


	LL_I2C_GenerateStopCondition(I2C1);
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MPU6050_Init+0xf0>)
 8000808:	f7ff fe4a 	bl	80004a0 <LL_I2C_GenerateStopCondition>
  __ASM volatile ("cpsie i" : : : "memory");
 800080c:	b662      	cpsie	i
}
 800080e:	bf00      	nop


	__enable_irq();

	while( ! (LL_I2C_IsActiveFlag_RXNE(I2C1) == SET) )
 8000810:	e000      	b.n	8000814 <MPU6050_Init+0xd0>
	{
		__NOP();
 8000812:	bf00      	nop
	while( ! (LL_I2C_IsActiveFlag_RXNE(I2C1) == SET) )
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MPU6050_Init+0xf0>)
 8000816:	f7ff fdc9 	bl	80003ac <LL_I2C_IsActiveFlag_RXNE>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d1f8      	bne.n	8000812 <MPU6050_Init+0xce>
	}


	uint8_t result = LL_I2C_ReceiveData8(I2C1);
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MPU6050_Init+0xf0>)
 8000822:	f7ff fe5b 	bl	80004dc <LL_I2C_ReceiveData8>
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]

	__NOP();
 800082a:	bf00      	nop
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
	}
*/


}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff ff39 	bl	80006b4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000842:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000846:	f7ff ff1d 	bl	8000684 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084a:	2003      	movs	r0, #3
 800084c:	f7ff fd78 	bl	8000340 <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000850:	f7ff ff68 	bl	8000724 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f80a 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f7ff fc90 	bl	800017c <MX_GPIO_Init>
  MX_I2C1_Init();
 800085c:	f7ff fd1a 	bl	8000294 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000860:	f7ff ff70 	bl	8000744 <MPU6050_Init>

  LL_mDelay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f000 fc0b 	bl	8001080 <LL_mDelay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0x32>

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff ff37 	bl	80006e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000876:	bf00      	nop
 8000878:	f7ff ff48 	bl	800070c <LL_FLASH_GetLatency>
 800087c:	4603      	mov	r3, r0
 800087e:	2b02      	cmp	r3, #2
 8000880:	d1fa      	bne.n	8000878 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000882:	f7ff fe4b 	bl	800051c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000886:	bf00      	nop
 8000888:	f7ff fe56 	bl	8000538 <LL_RCC_HSE_IsReady>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	d1fa      	bne.n	8000888 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000892:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000896:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800089a:	f7ff fedb 	bl	8000654 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800089e:	f7ff feb9 	bl	8000614 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008a2:	bf00      	nop
 80008a4:	f7ff fec4 	bl	8000630 <LL_RCC_PLL_IsReady>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d1fa      	bne.n	80008a4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fe74 	bl	800059c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80008b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008b8:	f7ff fe84 	bl	80005c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe95 	bl	80005ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fe4a 	bl	800055c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008c8:	bf00      	nop
 80008ca:	f7ff fe5b 	bl	8000584 <LL_RCC_GetSysClkSource>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d1fa      	bne.n	80008ca <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <SystemClock_Config+0x78>)
 80008d6:	f000 fbc5 	bl	8001064 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80008da:	4802      	ldr	r0, [pc, #8]	; (80008e4 <SystemClock_Config+0x78>)
 80008dc:	f000 fbf4 	bl	80010c8 <LL_SetSystemCoreClock>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	044aa200 	.word	0x044aa200

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff fff7 	bl	8000936 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000960:	4c09      	ldr	r4, [pc, #36]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f000 fbb9 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff ff61 	bl	8000838 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000980:	08001164 	.word	0x08001164
  ldr r2, =_sbss
 8000984:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000988:	20000020 	.word	0x20000020

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>

0800098e <LL_GPIO_SetPinMode>:
{
 800098e:	b490      	push	{r4, r7}
 8000990:	b088      	sub	sp, #32
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	461a      	mov	r2, r3
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	0e1b      	lsrs	r3, r3, #24
 80009a2:	4413      	add	r3, r2
 80009a4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80009a6:	6822      	ldr	r2, [r4, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	210f      	movs	r1, #15
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	61bb      	str	r3, [r7, #24]
  return result;
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fab3 f383 	clz	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	6023      	str	r3, [r4, #0]
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc90      	pop	{r4, r7}
 80009f0:	4770      	bx	lr

080009f2 <LL_GPIO_SetPinSpeed>:
{
 80009f2:	b490      	push	{r4, r7}
 80009f4:	b088      	sub	sp, #32
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	0e1b      	lsrs	r3, r3, #24
 8000a06:	4413      	add	r3, r2
 8000a08:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000a0a:	6822      	ldr	r2, [r4, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	613b      	str	r3, [r7, #16]
  return result;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	fab3 f383 	clz	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	2103      	movs	r1, #3
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fa93 f3a3 	rbit	r3, r3
 8000a36:	61bb      	str	r3, [r7, #24]
  return result;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	6023      	str	r3, [r4, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc90      	pop	{r4, r7}
 8000a54:	4770      	bx	lr

08000a56 <LL_GPIO_SetPinOutputType>:
{
 8000a56:	b490      	push	{r4, r7}
 8000a58:	b088      	sub	sp, #32
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	461a      	mov	r2, r3
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	0e1b      	lsrs	r3, r3, #24
 8000a6a:	4413      	add	r3, r2
 8000a6c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000a6e:	6822      	ldr	r2, [r4, #0]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	613b      	str	r3, [r7, #16]
  return result;
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	2104      	movs	r1, #4
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	fa93 f3a3 	rbit	r3, r3
 8000a9a:	61bb      	str	r3, [r7, #24]
  return result;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6023      	str	r3, [r4, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc90      	pop	{r4, r7}
 8000ab8:	4770      	bx	lr

08000aba <LL_GPIO_SetPinPull>:
{
 8000aba:	b480      	push	{r7}
 8000abc:	b087      	sub	sp, #28
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	613b      	str	r3, [r7, #16]
  return result;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	408b      	lsls	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	60da      	str	r2, [r3, #12]
}
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b088      	sub	sp, #32
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	0c1b      	lsrs	r3, r3, #16
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	60fb      	str	r3, [r7, #12]
  return result;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000b20:	fab3 f383 	clz	r3, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000b28:	e044      	b.n	8000bb4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	4013      	ands	r3, r2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d03a      	beq.n	8000bae <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	d806      	bhi.n	8000b4c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000b3e:	f240 1201 	movw	r2, #257	; 0x101
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	e008      	b.n	8000b5e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b5c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d106      	bne.n	8000b74 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	69b9      	ldr	r1, [r7, #24]
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffa3 	bl	8000aba <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	69b9      	ldr	r1, [r7, #24]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff06 	bl	800098e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d003      	beq.n	8000b92 <LL_GPIO_Init+0x94>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b09      	cmp	r3, #9
 8000b90:	d10d      	bne.n	8000bae <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	461a      	mov	r2, r3
 8000b98:	69b9      	ldr	r1, [r7, #24]
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff29 	bl	80009f2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	69b9      	ldr	r1, [r7, #24]
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff54 	bl	8000a56 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1b4      	bne.n	8000b2a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <LL_I2C_Enable>:
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_I2C_Disable>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f023 0201 	bic.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <LL_I2C_SetOwnAddress1>:
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	431a      	orrs	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	609a      	str	r2, [r3, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <LL_I2C_ConfigSpeed>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4a41      	ldr	r2, [pc, #260]	; (8000d54 <LL_I2C_ConfigSpeed+0x120>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4939      	ldr	r1, [pc, #228]	; (8000d58 <LL_I2C_ConfigSpeed+0x124>)
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d802      	bhi.n	8000c7c <LL_I2C_ConfigSpeed+0x48>
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	e009      	b.n	8000c90 <LL_I2C_ConfigSpeed+0x5c>
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	4935      	ldr	r1, [pc, #212]	; (8000d5c <LL_I2C_ConfigSpeed+0x128>)
 8000c88:	fba1 1303 	umull	r1, r3, r1, r3
 8000c8c:	099b      	lsrs	r3, r3, #6
 8000c8e:	3301      	adds	r3, #1
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <LL_I2C_ConfigSpeed+0x124>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d939      	bls.n	8000d12 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d117      	bne.n	8000cd4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d009      	beq.n	8000cce <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ccc:	e01d      	b.n	8000d0a <LL_I2C_ConfigSpeed+0xd6>
 8000cce:	f248 0301 	movw	r3, #32769	; 0x8001
 8000cd2:	e01a      	b.n	8000d0a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009a      	lsls	r2, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009a      	lsls	r2, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d04:	e001      	b.n	8000d0a <LL_I2C_ConfigSpeed+0xd6>
 8000d06:	f248 0301 	movw	r3, #32769	; 0x8001
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e011      	b.n	8000d36 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d20:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	e000      	b.n	8000d34 <LL_I2C_ConfigSpeed+0x100>
 8000d32:	2304      	movs	r3, #4
 8000d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	61da      	str	r2, [r3, #28]
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	000186a0 	.word	0x000186a0
 8000d5c:	10624dd3 	.word	0x10624dd3

08000d60 <LL_I2C_SetMode>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 021a 	bic.w	r2, r3, #26
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_I2C_AcknowledgeNextData>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff18 	bl	8000be8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f87b 	bl	8000eb8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8000dc2:	6939      	ldr	r1, [r7, #16]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff31 	bl	8000c34 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68d9      	ldr	r1, [r3, #12]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff12 	bl	8000c06 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffb9 	bl	8000d60 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff feeb 	bl	8000bca <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffc2 	bl	8000d84 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <LL_RCC_GetSysClkSource>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <LL_RCC_GetSysClkSource+0x14>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_GetAHBPrescaler>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <LL_RCC_GetAHBPrescaler+0x14>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000

08000e3c <LL_RCC_GetAPB1Prescaler>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_GetAPB2Prescaler>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40021000 	.word	0x40021000

08000e6c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <LL_RCC_PLL_GetMainSource+0x14>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000

08000e9c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <LL_RCC_PLL_GetPrediv+0x18>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	0c5b      	lsrs	r3, r3, #17
 8000ea6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ec0:	f000 f820 	bl	8000f04 <RCC_GetSystemClockFreq>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f83e 	bl	8000f50 <RCC_GetHCLKClockFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f84c 	bl	8000f7c <RCC_GetPCLK1ClockFreq>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f858 	bl	8000fa4 <RCC_GetPCLK2ClockFreq>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60da      	str	r2, [r3, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000f0e:	f7ff ff7d 	bl	8000e0c <LL_RCC_GetSysClkSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d00c      	beq.n	8000f32 <RCC_GetSystemClockFreq+0x2e>
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d80e      	bhi.n	8000f3a <RCC_GetSystemClockFreq+0x36>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <RCC_GetSystemClockFreq+0x22>
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d003      	beq.n	8000f2c <RCC_GetSystemClockFreq+0x28>
 8000f24:	e009      	b.n	8000f3a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <RCC_GetSystemClockFreq+0x48>)
 8000f28:	607b      	str	r3, [r7, #4]
      break;
 8000f2a:	e009      	b.n	8000f40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <RCC_GetSystemClockFreq+0x48>)
 8000f2e:	607b      	str	r3, [r7, #4]
      break;
 8000f30:	e006      	b.n	8000f40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000f32:	f000 f84b 	bl	8000fcc <RCC_PLL_GetFreqDomain_SYS>
 8000f36:	6078      	str	r0, [r7, #4]
      break;
 8000f38:	e002      	b.n	8000f40 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <RCC_GetSystemClockFreq+0x48>)
 8000f3c:	607b      	str	r3, [r7, #4]
      break;
 8000f3e:	bf00      	nop
  }

  return frequency;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	007a1200 	.word	0x007a1200

08000f50 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000f58:	f7ff ff64 	bl	8000e24 <LL_RCC_GetAHBPrescaler>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <RCC_GetHCLKClockFreq+0x28>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	40d3      	lsrs	r3, r2
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	08001144 	.word	0x08001144

08000f7c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000f84:	f7ff ff5a 	bl	8000e3c <LL_RCC_GetAPB1Prescaler>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <RCC_GetPCLK1ClockFreq+0x24>)
 8000f8e:	5cd3      	ldrb	r3, [r2, r3]
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	40d3      	lsrs	r3, r2
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08001154 	.word	0x08001154

08000fa4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000fac:	f7ff ff52 	bl	8000e54 <LL_RCC_GetAPB2Prescaler>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	0adb      	lsrs	r3, r3, #11
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <RCC_GetPCLK2ClockFreq+0x24>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	40d3      	lsrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08001154 	.word	0x08001154

08000fcc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000fda:	f7ff ff47 	bl	8000e6c <LL_RCC_PLL_GetMainSource>
 8000fde:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d003      	beq.n	8000ff6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000fee:	e00b      	b.n	8001008 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000ff2:	607b      	str	r3, [r7, #4]
      break;
 8000ff4:	e00b      	b.n	800100e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000ff6:	f7ff ff51 	bl	8000e9c <LL_RCC_PLL_GetPrediv>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	607b      	str	r3, [r7, #4]
      break;
 8001006:	e002      	b.n	800100e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800100a:	607b      	str	r3, [r7, #4]
      break;
 800100c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800100e:	f7ff ff39 	bl	8000e84 <LL_RCC_PLL_GetMultiplicator>
 8001012:	4603      	mov	r3, r0
 8001014:	0c9b      	lsrs	r3, r3, #18
 8001016:	3302      	adds	r3, #2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	fb02 f303 	mul.w	r3, r2, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	003d0900 	.word	0x003d0900
 800102c:	007a1200 	.word	0x007a1200

08001030 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <LL_InitTick+0x30>)
 8001044:	3b01      	subs	r3, #1
 8001046:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <LL_InitTick+0x30>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <LL_InitTick+0x30>)
 8001050:	2205      	movs	r2, #5
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800106c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffdd 	bl	8001030 <LL_InitTick>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <LL_mDelay+0x44>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800108e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001096:	d00c      	beq.n	80010b2 <LL_mDelay+0x32>
  {
    Delay++;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800109e:	e008      	b.n	80010b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <LL_mDelay+0x44>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <LL_mDelay+0x32>
    {
      Delay--;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f3      	bne.n	80010a0 <LL_mDelay+0x20>
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <LL_SetSystemCoreClock+0x18>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000000 	.word	0x20000000

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	2600      	movs	r6, #0
 80010e8:	4d0c      	ldr	r5, [pc, #48]	; (800111c <__libc_init_array+0x38>)
 80010ea:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ec:	1b64      	subs	r4, r4, r5
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	42a6      	cmp	r6, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	f000 f81a 	bl	800112c <_init>
 80010f8:	2600      	movs	r6, #0
 80010fa:	4d0a      	ldr	r5, [pc, #40]	; (8001124 <__libc_init_array+0x40>)
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <__libc_init_array+0x44>)
 80010fe:	1b64      	subs	r4, r4, r5
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	42a6      	cmp	r6, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f855 3b04 	ldr.w	r3, [r5], #4
 800110c:	4798      	blx	r3
 800110e:	3601      	adds	r6, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f855 3b04 	ldr.w	r3, [r5], #4
 8001116:	4798      	blx	r3
 8001118:	3601      	adds	r6, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	0800115c 	.word	0x0800115c
 8001120:	0800115c 	.word	0x0800115c
 8001124:	0800115c 	.word	0x0800115c
 8001128:	08001160 	.word	0x08001160

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
