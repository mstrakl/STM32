
uartDmaIdle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003098  08003098  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000054  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007368  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b46  00000000  00000000  00027408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  00028f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000720  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223ec  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008656  00000000  00000000  0004c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca722  00000000  00000000  000548ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011efec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000213c  00000000  00000000  0011f03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003050 	.word	0x08003050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003050 	.word	0x08003050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_DMA_Init+0x6c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DMA_Init+0x6c>)
 80005f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_DMA_Init+0x6c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000602:	f7ff ff63 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8000606:	4603      	mov	r3, r0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffb3 	bl	8000578 <NVIC_EncodePriority>
 8000612:	4603      	mov	r3, r0
 8000614:	4619      	mov	r1, r3
 8000616:	2010      	movs	r0, #16
 8000618:	f7ff ff84 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800061c:	2010      	movs	r0, #16
 800061e:	f7ff ff63 	bl	80004e8 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000622:	f7ff ff53 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8000626:	4603      	mov	r3, r0
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffa3 	bl	8000578 <NVIC_EncodePriority>
 8000632:	4603      	mov	r3, r0
 8000634:	4619      	mov	r1, r3
 8000636:	2011      	movs	r0, #17
 8000638:	f7ff ff74 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800063c:	2011      	movs	r0, #17
 800063e:	f7ff ff53 	bl	80004e8 <__NVIC_EnableIRQ>

}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <DynamicBuffer_Init>:
#include <string.h>
#include <stdlib.h>


void DynamicBuffer_Init( DynamicBuffer* dbuff, size_t size )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    dbuff->size = size;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]
    dbuff->pos = 0;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
    dbuff->tx_size = 0;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]

    dbuff->buff = (uint8_t *) malloc( dbuff->size*sizeof(uint8_t ) );
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fc1d 	bl	8002eb0 <malloc>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <DynamicBuffer_Append>:


void DynamicBuffer_Append( DynamicBuffer* dbuff, uint8_t* data, size_t size )
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
    size_t free = dbuff->size - dbuff->pos;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	617b      	str	r3, [r7, #20]

    if ( size <= free ) {
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d80f      	bhi.n	80006c6 <DynamicBuffer_Append+0x40>

        memcpy( &dbuff->buff[ dbuff->pos ], data, size );
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fc03 	bl	8002ec0 <memcpy>
        dbuff->pos += size;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	441a      	add	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	60da      	str	r2, [r3, #12]

    }



}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <DynamicBuffer_RollPosIndex>:

void DynamicBuffer_RollPosIndex( DynamicBuffer* dbuff, size_t size )
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
    if ( ! size > 0 ) return;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d028      	beq.n	8000730 <DynamicBuffer_RollPosIndex+0x62>

    if ( size <= dbuff->pos ) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d810      	bhi.n	800070a <DynamicBuffer_RollPosIndex+0x3c>

        memcpy( dbuff->buff, &dbuff->buff[ size ], size );
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f002 fbe2 	bl	8002ec0 <memcpy>

        dbuff->pos -= size;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	e013      	b.n	8000732 <DynamicBuffer_RollPosIndex+0x64>

    }

    else {

        memcpy( dbuff->buff, &dbuff->buff[ dbuff->pos ], dbuff->pos );
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	18d1      	adds	r1, r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	461a      	mov	r2, r3
 800071e:	f002 fbcf 	bl	8002ec0 <memcpy>

        size = dbuff->pos;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	603b      	str	r3, [r7, #0]

        dbuff->pos = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	e000      	b.n	8000732 <DynamicBuffer_RollPosIndex+0x64>
    if ( ! size > 0 ) return;
 8000730:	bf00      	nop

    }
}
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <DynamicBuffer_GetBuffAddr>:



uint8_t * DynamicBuffer_GetBuffAddr( DynamicBuffer* dbuff )
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    return dbuff->buff;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DynamicBuffer_GetBuffSize>:


size_t DynamicBuffer_GetBuffSize( DynamicBuffer* dbuff )
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    return dbuff->size;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DynamicBuffer_GetBuffPos>:


size_t DynamicBuffer_GetBuffPos( DynamicBuffer* dbuff )
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    return dbuff->pos;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DynamicBuffer_SetTxSize>:

void DynamicBuffer_SetTxSize( DynamicBuffer* dbuff, size_t size )
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
    dbuff->tx_size = size;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	609a      	str	r2, [r3, #8]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DynamicBuffer_GetTxSize>:

size_t DynamicBuffer_GetTxSize( DynamicBuffer* dbuff )
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    return dbuff->tx_size;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_GPIO_Init+0x30>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <MX_GPIO_Init+0x30>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_GPIO_Init+0x30>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fffd 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f84f 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f7ff ffdd 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fa:	f7ff fef1 	bl	80005e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 fe69 	bl	80014d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t txbuff[20];
  int k = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t tck=0;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  int delay = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Set delay
      if ( HAL_GetTick() - tck > 2000 ) {
 800080e:	f001 f853 	bl	80018b8 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800081c:	d90a      	bls.n	8000834 <main+0x4c>
          if ( delay > 0 ) {
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd02      	ble.n	800082a <main+0x42>
              delay = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	e001      	b.n	800082e <main+0x46>
          } else {
              delay = 250;
 800082a:	23fa      	movs	r3, #250	; 0xfa
 800082c:	61fb      	str	r3, [r7, #28]
          }

          tck = HAL_GetTick();
 800082e:	f001 f843 	bl	80018b8 <HAL_GetTick>
 8000832:	6238      	str	r0, [r7, #32]
      }



      // Tx data
      for (int i=0; i<8; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	e00d      	b.n	8000856 <main+0x6e>
      {
          txbuff[i] = i+k;
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b2d9      	uxtb	r1, r3
 8000846:	1d3a      	adds	r2, r7, #4
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<8; i++)
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3301      	adds	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	2b07      	cmp	r3, #7
 800085a:	ddee      	ble.n	800083a <main+0x52>
      }

      DynamicBuffer_Append( &u2_txBuff, txbuff, 8 );
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2208      	movs	r2, #8
 8000860:	4619      	mov	r1, r3
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <main+0xa4>)
 8000864:	f7ff ff0f 	bl	8000686 <DynamicBuffer_Append>
      UART_TransmitDMA(USART2, &u2_txBuff);
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <main+0xa4>)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <main+0xa8>)
 800086c:	f000 ff4a 	bl	8001704 <UART_TransmitDMA>

      k++;
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	3301      	adds	r3, #1
 8000874:	627b      	str	r3, [r7, #36]	; 0x24


      if ( k > 100 ) k=0;
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	2b64      	cmp	r3, #100	; 0x64
 800087a:	dd01      	ble.n	8000880 <main+0x98>
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_Delay( delay );
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f824 	bl	80018d0 <HAL_Delay>
      if ( HAL_GetTick() - tck > 2000 ) {
 8000888:	e7c1      	b.n	800080e <main+0x26>
 800088a:	bf00      	nop
 800088c:	200000a0 	.word	0x200000a0
 8000890:	40004400 	.word	0x40004400

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fb1a 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xb4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xb4>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xb4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <SystemClock_Config+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <SystemClock_Config+0xb8>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <SystemClock_Config+0xb8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2310      	movs	r3, #16
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f8ed 	bl	8001ae4 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000910:	f000 f81e 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fb50 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800093a:	f000 f809 	bl	8000950 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	2b10      	cmp	r3, #16
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80009e8:	68fb      	ldr	r3, [r7, #12]
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	2b10      	cmp	r3, #16
 8000a08:	bf0c      	ite	eq
 8000a0a:	2301      	moveq	r3, #1
 8000a0c:	2300      	movne	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <LL_DMA_EnableStream+0x3c>)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <LL_DMA_EnableStream+0x3c>)
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	440a      	add	r2, r1
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	440a      	add	r2, r1
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	08003068 	.word	0x08003068

08000a5c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <LL_DMA_DisableStream+0x3c>)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <LL_DMA_DisableStream+0x3c>)
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	440a      	add	r2, r1
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	440a      	add	r2, r1
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	08003068 	.word	0x08003068

08000a9c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LL_DMA_SetDataLength+0x44>)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	0c1b      	lsrs	r3, r3, #16
 8000aba:	041b      	lsls	r3, r3, #16
 8000abc:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <LL_DMA_SetDataLength+0x44>)
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	440a      	add	r2, r1
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	440a      	add	r2, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	604b      	str	r3, [r1, #4]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	08003068 	.word	0x08003068

08000ae4 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <LL_DMA_GetDataLength+0x28>)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	b29b      	uxth	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	08003068 	.word	0x08003068

08000b10 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6e:	60da      	str	r2, [r3, #12]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b8a:	60da      	str	r2, [r3, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LL_DMA_IsEnabledIT_TC+0x34>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	2b10      	cmp	r3, #16
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	08003068 	.word	0x08003068

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 fe38 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_5) && LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8000c28:	2105      	movs	r1, #5
 8000c2a:	480f      	ldr	r0, [pc, #60]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c2c:	f7ff ffb4 	bl	8000b98 <LL_DMA_IsEnabledIT_TC>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d015      	beq.n	8000c62 <DMA1_Stream5_IRQHandler+0x3e>
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c38:	f7ff ff6a 	bl	8000b10 <LL_DMA_IsActiveFlag_TC5>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00f      	beq.n	8000c62 <DMA1_Stream5_IRQHandler+0x3e>

        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8000c42:	2105      	movs	r1, #5
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c46:	f7ff ff09 	bl	8000a5c <LL_DMA_DisableStream>

        LL_DMA_ClearFlag_TC5(DMA1);
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c4c:	f7ff ff88 	bl	8000b60 <LL_DMA_ClearFlag_TC5>

        LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, U2_RXFRAMELEN);
 8000c50:	220a      	movs	r2, #10
 8000c52:	2105      	movs	r1, #5
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c56:	f7ff ff21 	bl	8000a9c <LL_DMA_SetDataLength>

        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Stream5_IRQHandler+0x44>)
 8000c5e:	f7ff fedd 	bl	8000a1c <LL_DMA_EnableStream>
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40026000 	.word	0x40026000

08000c6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_6) && LL_DMA_IsActiveFlag_TC6(DMA1)) {
 8000c70:	2106      	movs	r1, #6
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <DMA1_Stream6_IRQHandler+0x50>)
 8000c74:	f7ff ff90 	bl	8000b98 <LL_DMA_IsEnabledIT_TC>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d01c      	beq.n	8000cb8 <DMA1_Stream6_IRQHandler+0x4c>
 8000c7e:	480f      	ldr	r0, [pc, #60]	; (8000cbc <DMA1_Stream6_IRQHandler+0x50>)
 8000c80:	f7ff ff5a 	bl	8000b38 <LL_DMA_IsActiveFlag_TC6>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d016      	beq.n	8000cb8 <DMA1_Stream6_IRQHandler+0x4c>

        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8000c8a:	2106      	movs	r1, #6
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <DMA1_Stream6_IRQHandler+0x50>)
 8000c8e:	f7ff fee5 	bl	8000a5c <LL_DMA_DisableStream>

        LL_DMA_ClearFlag_TC6(DMA1);
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <DMA1_Stream6_IRQHandler+0x50>)
 8000c94:	f7ff ff72 	bl	8000b7c <LL_DMA_ClearFlag_TC6>


        DynamicBuffer_RollPosIndex( &u2_txBuff, DynamicBuffer_GetTxSize( &u2_txBuff ) );
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <DMA1_Stream6_IRQHandler+0x54>)
 8000c9a:	f7ff fd7f 	bl	800079c <DynamicBuffer_GetTxSize>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <DMA1_Stream6_IRQHandler+0x54>)
 8000ca4:	f7ff fd13 	bl	80006ce <DynamicBuffer_RollPosIndex>
        DynamicBuffer_SetTxSize( &u2_txBuff, 0 );
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <DMA1_Stream6_IRQHandler+0x54>)
 8000cac:	f7ff fd68 	bl	8000780 <DynamicBuffer_SetTxSize>

        UART_TransmitDMA(USART2, &u2_txBuff);
 8000cb0:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <DMA1_Stream6_IRQHandler+0x54>)
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <DMA1_Stream6_IRQHandler+0x58>)
 8000cb4:	f000 fd26 	bl	8001704 <UART_TransmitDMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40026000 	.word	0x40026000
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2)) {
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <USART2_IRQHandler+0x54>)
 8000cce:	f7ff fe92 	bl	80009f6 <LL_USART_IsEnabledIT_IDLE>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d01e      	beq.n	8000d16 <USART2_IRQHandler+0x4e>
 8000cd8:	4810      	ldr	r0, [pc, #64]	; (8000d1c <USART2_IRQHandler+0x54>)
 8000cda:	f7ff fe67 	bl	80009ac <LL_USART_IsActiveFlag_IDLE>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d018      	beq.n	8000d16 <USART2_IRQHandler+0x4e>

        usart2_rx_len = U2_RXFRAMELEN - LL_DMA_GetDataLength(DMA1, LL_DMA_STREAM_5);
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <USART2_IRQHandler+0x58>)
 8000ce8:	f7ff fefc 	bl	8000ae4 <LL_DMA_GetDataLength>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f1c3 030a 	rsb	r3, r3, #10
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <USART2_IRQHandler+0x5c>)
 8000cf4:	6013      	str	r3, [r2, #0]

        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <USART2_IRQHandler+0x58>)
 8000cfa:	f7ff feaf 	bl	8000a5c <LL_DMA_DisableStream>

        LL_USART_ClearFlag_IDLE(USART2);
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <USART2_IRQHandler+0x54>)
 8000d00:	f7ff fe67 	bl	80009d2 <LL_USART_ClearFlag_IDLE>

        LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, U2_RXFRAMELEN);
 8000d04:	220a      	movs	r2, #10
 8000d06:	2105      	movs	r1, #5
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <USART2_IRQHandler+0x58>)
 8000d0a:	f7ff fec7 	bl	8000a9c <LL_DMA_SetDataLength>

        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 8000d0e:	2105      	movs	r1, #5
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <USART2_IRQHandler+0x58>)
 8000d12:	f7ff fe83 	bl	8000a1c <LL_DMA_EnableStream>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40026000 	.word	0x40026000
 8000d24:	2000008c 	.word	0x2000008c

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 f880 	bl	8002e5c <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	200000c8 	.word	0x200000c8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <LL_USART_Enable>:
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60da      	str	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_USART_ConfigAsyncMode>:
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_USART_EnableIT_IDLE>:
{
 8000f16:	b480      	push	{r7}
 8000f18:	b089      	sub	sp, #36	; 0x24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	330c      	adds	r3, #12
 8000f22:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	e853 3f00 	ldrex	r3, [r3]
 8000f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	330c      	adds	r3, #12
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	61ba      	str	r2, [r7, #24]
 8000f3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	e841 2300 	strex	r3, r2, [r1]
 8000f46:	613b      	str	r3, [r7, #16]
   return(result);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1e7      	bne.n	8000f1e <LL_USART_EnableIT_IDLE+0x8>
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3724      	adds	r7, #36	; 0x24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3314      	adds	r3, #20
 8000f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	e853 3f00 	ldrex	r3, [r3]
 8000f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3314      	adds	r3, #20
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	61ba      	str	r2, [r7, #24]
 8000f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f84:	6979      	ldr	r1, [r7, #20]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	e841 2300 	strex	r3, r2, [r1]
 8000f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e7      	bne.n	8000f64 <LL_USART_EnableDMAReq_RX+0x8>
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b089      	sub	sp, #36	; 0x24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3314      	adds	r3, #20
 8000fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	e853 3f00 	ldrex	r3, [r3]
 8000fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	61ba      	str	r2, [r7, #24]
 8000fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fca:	6979      	ldr	r1, [r7, #20]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	e841 2300 	strex	r3, r2, [r1]
 8000fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1e7      	bne.n	8000faa <LL_USART_EnableDMAReq_TX+0x8>
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3724      	adds	r7, #36	; 0x24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3304      	adds	r3, #4
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800

08001030 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LL_APB1_GRP1_EnableClock+0x2c>)
 800103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <LL_APB1_GRP1_EnableClock+0x2c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800

08001060 <LL_DMA_EnableStream>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <LL_DMA_EnableStream+0x3c>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <LL_DMA_EnableStream+0x3c>)
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	440a      	add	r2, r1
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	4611      	mov	r1, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	440a      	add	r2, r1
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	08003088 	.word	0x08003088

080010a0 <LL_DMA_SetDataTransferDirection>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	440b      	add	r3, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	440b      	add	r3, r1
 80010ce:	4619      	mov	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	08003088 	.word	0x08003088

080010e8 <LL_DMA_SetMode>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LL_DMA_SetMode+0x44>)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <LL_DMA_SetMode+0x44>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	440b      	add	r3, r1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	440b      	add	r3, r1
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	08003088 	.word	0x08003088

08001130 <LL_DMA_SetPeriphIncMode>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LL_DMA_SetPeriphIncMode+0x44>)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <LL_DMA_SetPeriphIncMode+0x44>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	440b      	add	r3, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	440b      	add	r3, r1
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	08003088 	.word	0x08003088

08001178 <LL_DMA_SetMemoryIncMode>:
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LL_DMA_SetMemoryIncMode+0x44>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <LL_DMA_SetMemoryIncMode+0x44>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	440b      	add	r3, r1
 80011a6:	4619      	mov	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	08003088 	.word	0x08003088

080011c0 <LL_DMA_SetPeriphSize>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LL_DMA_SetPeriphSize+0x44>)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <LL_DMA_SetPeriphSize+0x44>)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	440b      	add	r3, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	440b      	add	r3, r1
 80011ee:	4619      	mov	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	08003088 	.word	0x08003088

08001208 <LL_DMA_SetMemorySize>:
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LL_DMA_SetMemorySize+0x44>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001228:	4908      	ldr	r1, [pc, #32]	; (800124c <LL_DMA_SetMemorySize+0x44>)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	440b      	add	r3, r1
 8001236:	4619      	mov	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08003088 	.word	0x08003088

08001250 <LL_DMA_SetStreamPriorityLevel>:
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	440b      	add	r3, r1
 800127e:	4619      	mov	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	08003088 	.word	0x08003088

08001298 <LL_DMA_SetDataLength>:
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LL_DMA_SetDataLength+0x44>)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	4908      	ldr	r1, [pc, #32]	; (80012dc <LL_DMA_SetDataLength+0x44>)
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	440a      	add	r2, r1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	4611      	mov	r1, r2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	440a      	add	r2, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	08003088 	.word	0x08003088

080012e0 <LL_DMA_SetChannelSelection>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LL_DMA_SetChannelSelection+0x44>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001300:	4908      	ldr	r1, [pc, #32]	; (8001324 <LL_DMA_SetChannelSelection+0x44>)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	440b      	add	r3, r1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	440b      	add	r3, r1
 800130e:	4619      	mov	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	08003088 	.word	0x08003088

08001328 <LL_DMA_DisableFifoMode>:
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <LL_DMA_DisableFifoMode+0x3c>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <LL_DMA_DisableFifoMode+0x3c>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	440a      	add	r2, r1
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	440a      	add	r2, r1
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6153      	str	r3, [r2, #20]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	08003088 	.word	0x08003088

08001368 <LL_DMA_SetMemoryAddress>:
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <LL_DMA_SetMemoryAddress+0x2c>)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	08003088 	.word	0x08003088

08001398 <LL_DMA_SetPeriphAddress>:
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <LL_DMA_SetPeriphAddress+0x2c>)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6093      	str	r3, [r2, #8]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	08003088 	.word	0x08003088

080013c8 <LL_DMA_ClearFlag_HT6>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_DMA_ClearFlag_TC6>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013f2:	60da      	str	r2, [r3, #12]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DMA_ClearFlag_TE6>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800140e:	60da      	str	r2, [r3, #12]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_DMA_ClearFlag_DME6>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF6);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800142a:	60da      	str	r2, [r3, #12]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_DMA_ClearFlag_FE6>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF6);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001446:	60da      	str	r2, [r3, #12]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_DMA_EnableIT_TC>:
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LL_DMA_EnableIT_TC+0x3c>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_DMA_EnableIT_TC+0x3c>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	440a      	add	r2, r1
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	440a      	add	r2, r1
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	08003088 	.word	0x08003088

08001494 <LL_DMA_DisableIT_HT>:
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LL_DMA_DisableIT_HT+0x3c>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <LL_DMA_DisableIT_HT+0x3c>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	440a      	add	r2, r1
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	440a      	add	r2, r1
 80014bc:	f023 0308 	bic.w	r3, r3, #8
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	08003088 	.word	0x08003088

080014d4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80014fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001502:	f7ff fd95 	bl	8001030 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fd7a 	bl	8001000 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800150c:	230c      	movs	r3, #12
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001510:	2302      	movs	r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001520:	2307      	movs	r3, #7
 8001522:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4871      	ldr	r0, [pc, #452]	; (80016f0 <MX_USART2_UART_Init+0x21c>)
 800152a:	f001 f804 	bl	8002536 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 800152e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001532:	2105      	movs	r1, #5
 8001534:	486f      	ldr	r0, [pc, #444]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001536:	f7ff fed3 	bl	80012e0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	486d      	ldr	r0, [pc, #436]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001540:	f7ff fdae 	bl	80010a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_MEDIUM);
 8001544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001548:	2105      	movs	r1, #5
 800154a:	486a      	ldr	r0, [pc, #424]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800154c:	f7ff fe80 	bl	8001250 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	4867      	ldr	r0, [pc, #412]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001556:	f7ff fdc7 	bl	80010e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 800155a:	2200      	movs	r2, #0
 800155c:	2105      	movs	r1, #5
 800155e:	4865      	ldr	r0, [pc, #404]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001560:	f7ff fde6 	bl	8001130 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	2105      	movs	r1, #5
 800156a:	4862      	ldr	r0, [pc, #392]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800156c:	f7ff fe04 	bl	8001178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8001570:	2200      	movs	r2, #0
 8001572:	2105      	movs	r1, #5
 8001574:	485f      	ldr	r0, [pc, #380]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001576:	f7ff fe23 	bl	80011c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	485d      	ldr	r0, [pc, #372]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001580:	f7ff fe42 	bl	8001208 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001584:	2105      	movs	r1, #5
 8001586:	485b      	ldr	r0, [pc, #364]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001588:	f7ff fece 	bl	8001328 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800158c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001590:	2106      	movs	r1, #6
 8001592:	4858      	ldr	r0, [pc, #352]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001594:	f7ff fea4 	bl	80012e0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	2106      	movs	r1, #6
 800159c:	4855      	ldr	r0, [pc, #340]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800159e:	f7ff fd7f 	bl	80010a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_MEDIUM);
 80015a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a6:	2106      	movs	r1, #6
 80015a8:	4852      	ldr	r0, [pc, #328]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015aa:	f7ff fe51 	bl	8001250 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2106      	movs	r1, #6
 80015b2:	4850      	ldr	r0, [pc, #320]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015b4:	f7ff fd98 	bl	80010e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2106      	movs	r1, #6
 80015bc:	484d      	ldr	r0, [pc, #308]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015be:	f7ff fdb7 	bl	8001130 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80015c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c6:	2106      	movs	r1, #6
 80015c8:	484a      	ldr	r0, [pc, #296]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015ca:	f7ff fdd5 	bl	8001178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2106      	movs	r1, #6
 80015d2:	4848      	ldr	r0, [pc, #288]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015d4:	f7ff fdf4 	bl	80011c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80015d8:	2200      	movs	r2, #0
 80015da:	2106      	movs	r1, #6
 80015dc:	4845      	ldr	r0, [pc, #276]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015de:	f7ff fe13 	bl	8001208 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80015e2:	2106      	movs	r1, #6
 80015e4:	4843      	ldr	r0, [pc, #268]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80015e6:	f7ff fe9f 	bl	8001328 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015ea:	f7ff fbe5 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc35 	bl	8000e64 <NVIC_EncodePriority>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	2026      	movs	r0, #38	; 0x26
 8001600:	f7ff fc06 	bl	8000e10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001604:	2026      	movs	r0, #38	; 0x26
 8001606:	f7ff fbe5 	bl	8000dd4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  // RX

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_5, LL_USART_DMA_GetRegAddr(USART2));
 800160a:	483b      	ldr	r0, [pc, #236]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 800160c:	f7ff fcec 	bl	8000fe8 <LL_USART_DMA_GetRegAddr>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	2105      	movs	r1, #5
 8001616:	4837      	ldr	r0, [pc, #220]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001618:	f7ff febe 	bl	8001398 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_5, (uint32_t)u2_rxBuff);
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <MX_USART2_UART_Init+0x228>)
 800161e:	461a      	mov	r2, r3
 8001620:	2105      	movs	r1, #5
 8001622:	4834      	ldr	r0, [pc, #208]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001624:	f7ff fea0 	bl	8001368 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, U2_RXFRAMELEN);
 8001628:	220a      	movs	r2, #10
 800162a:	2105      	movs	r1, #5
 800162c:	4831      	ldr	r0, [pc, #196]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800162e:	f7ff fe33 	bl	8001298 <LL_DMA_SetDataLength>

  LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_5);
 8001632:	2105      	movs	r1, #5
 8001634:	482f      	ldr	r0, [pc, #188]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001636:	f7ff ff2d 	bl	8001494 <LL_DMA_DisableIT_HT>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_5);
 800163a:	2105      	movs	r1, #5
 800163c:	482d      	ldr	r0, [pc, #180]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800163e:	f7ff ff09 	bl	8001454 <LL_DMA_EnableIT_TC>


  // TX

  DynamicBuffer_Init( &u2_txBuff, U2_TXFRAMELEN );
 8001642:	2114      	movs	r1, #20
 8001644:	482e      	ldr	r0, [pc, #184]	; (8001700 <MX_USART2_UART_Init+0x22c>)
 8001646:	f7ff f803 	bl	8000650 <DynamicBuffer_Init>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART2));
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 800164c:	f7ff fccc 	bl	8000fe8 <LL_USART_DMA_GetRegAddr>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	2106      	movs	r1, #6
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001658:	f7ff fe9e 	bl	8001398 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)DynamicBuffer_GetBuffAddr(&u2_txBuff));
 800165c:	4828      	ldr	r0, [pc, #160]	; (8001700 <MX_USART2_UART_Init+0x22c>)
 800165e:	f7ff f86b 	bl	8000738 <DynamicBuffer_GetBuffAddr>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	2106      	movs	r1, #6
 8001668:	4822      	ldr	r0, [pc, #136]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800166a:	f7ff fe7d 	bl	8001368 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, DynamicBuffer_GetBuffSize(&u2_txBuff));
 800166e:	4824      	ldr	r0, [pc, #144]	; (8001700 <MX_USART2_UART_Init+0x22c>)
 8001670:	f7ff f86e 	bl	8000750 <DynamicBuffer_GetBuffSize>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	2106      	movs	r1, #6
 800167a:	481e      	ldr	r0, [pc, #120]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800167c:	f7ff fe0c 	bl	8001298 <LL_DMA_SetDataLength>

  LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_6);
 8001680:	2106      	movs	r1, #6
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 8001684:	f7ff ff06 	bl	8001494 <LL_DMA_DisableIT_HT>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 8001688:	2106      	movs	r1, #6
 800168a:	481a      	ldr	r0, [pc, #104]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 800168c:	f7ff fee2 	bl	8001454 <LL_DMA_EnableIT_TC>



  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8001690:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001694:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016a2:	230c      	movs	r3, #12
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016b6:	f001 fb51 	bl	8002d5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80016ba:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016bc:	f7ff fc15 	bl	8000eea <LL_USART_ConfigAsyncMode>
  //LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */


  LL_USART_EnableDMAReq_RX(USART2);
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016c2:	f7ff fc4b 	bl	8000f5c <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART2);
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016c8:	f7ff fc25 	bl	8000f16 <LL_USART_EnableIT_IDLE>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 80016cc:	2105      	movs	r1, #5
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80016d0:	f7ff fcc6 	bl	8001060 <LL_DMA_EnableStream>

  LL_USART_EnableDMAReq_TX(USART2);
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016d6:	f7ff fc64 	bl	8000fa2 <LL_USART_EnableDMAReq_TX>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80016da:	2106      	movs	r1, #6
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART2_UART_Init+0x220>)
 80016de:	f7ff fcbf 	bl	8001060 <LL_DMA_EnableStream>

  LL_USART_Enable(USART2);
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART2_UART_Init+0x224>)
 80016e4:	f7ff fbf1 	bl	8000eca <LL_USART_Enable>



  /* USER CODE END USART2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3738      	adds	r7, #56	; 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40026000 	.word	0x40026000
 80016f8:	40004400 	.word	0x40004400
 80016fc:	20000094 	.word	0x20000094
 8001700:	200000a0 	.word	0x200000a0

08001704 <UART_TransmitDMA>:

/* USER CODE BEGIN 1 */

void UART_TransmitDMA( USART_TypeDef *USARTx, DynamicBuffer *dbuff )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]

    if ( (DynamicBuffer_GetBuffPos(dbuff) > 0) && (DynamicBuffer_GetTxSize(dbuff) == 0) ) {
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f7ff f82a 	bl	8000768 <DynamicBuffer_GetBuffPos>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d037      	beq.n	800178a <UART_TransmitDMA+0x86>
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f7ff f83e 	bl	800079c <DynamicBuffer_GetTxSize>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d131      	bne.n	800178a <UART_TransmitDMA+0x86>

        size_t txsize = DynamicBuffer_GetBuffPos(dbuff);
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f7ff f81e 	bl	8000768 <DynamicBuffer_GetBuffPos>
 800172c:	60f8      	str	r0, [r7, #12]

        if ( txsize > 10 ) txsize = 10;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b0a      	cmp	r3, #10
 8001732:	d901      	bls.n	8001738 <UART_TransmitDMA+0x34>
 8001734:	230a      	movs	r3, #10
 8001736:	60fb      	str	r3, [r7, #12]

        DynamicBuffer_SetTxSize( dbuff, txsize );
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f7ff f820 	bl	8000780 <DynamicBuffer_SetTxSize>

        LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, DynamicBuffer_GetTxSize(dbuff));
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff f82b 	bl	800079c <DynamicBuffer_GetTxSize>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	2106      	movs	r1, #6
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <UART_TransmitDMA+0x90>)
 800174e:	f7ff fda3 	bl	8001298 <LL_DMA_SetDataLength>
        LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)DynamicBuffer_GetBuffAddr(dbuff));
 8001752:	6838      	ldr	r0, [r7, #0]
 8001754:	f7fe fff0 	bl	8000738 <DynamicBuffer_GetBuffAddr>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	2106      	movs	r1, #6
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <UART_TransmitDMA+0x90>)
 8001760:	f7ff fe02 	bl	8001368 <LL_DMA_SetMemoryAddress>

        // Clear all flags
        LL_DMA_ClearFlag_TC6(DMA1);
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <UART_TransmitDMA+0x90>)
 8001766:	f7ff fe3d 	bl	80013e4 <LL_DMA_ClearFlag_TC6>
        LL_DMA_ClearFlag_HT6(DMA1);
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <UART_TransmitDMA+0x90>)
 800176c:	f7ff fe2c 	bl	80013c8 <LL_DMA_ClearFlag_HT6>
        LL_DMA_ClearFlag_DME6(DMA1);
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <UART_TransmitDMA+0x90>)
 8001772:	f7ff fe53 	bl	800141c <LL_DMA_ClearFlag_DME6>
        LL_DMA_ClearFlag_FE6(DMA1);
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <UART_TransmitDMA+0x90>)
 8001778:	f7ff fe5e 	bl	8001438 <LL_DMA_ClearFlag_FE6>
        LL_DMA_ClearFlag_TE6(DMA1);
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <UART_TransmitDMA+0x90>)
 800177e:	f7ff fe3f 	bl	8001400 <LL_DMA_ClearFlag_TE6>

        // Start transfer
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8001782:	2106      	movs	r1, #6
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <UART_TransmitDMA+0x90>)
 8001786:	f7ff fc6b 	bl	8001060 <LL_DMA_EnableStream>

    }


}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40026000 	.word	0x40026000

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179e:	490e      	ldr	r1, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b4:	4c0b      	ldr	r4, [pc, #44]	; (80017e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c2:	f7ff fae7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f001 fb4f 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff f80d 	bl	80007e8 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017dc:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 80017e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017e4:	200000c4 	.word	0x200000c4

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_Init+0x40>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_Init+0x40>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x40>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f931 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	200f      	movs	r0, #15
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff f89c 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f93b 	bl	8001aca <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800186c:	f000 f911 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000
 8001888:	20000008 	.word	0x20000008
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008
 80018b4:	200000b0 	.word	0x200000b0

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200000b0 	.word	0x200000b0

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008

08001918 <__NVIC_SetPriorityGrouping>:
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e267      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e242      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a75      	ldr	r2, [pc, #468]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6f      	ldr	r2, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6c      	ldr	r2, [pc, #432]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a68      	ldr	r2, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fe8c 	bl	80018b8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fe88 	bl	80018b8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e207      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fe78 	bl	80018b8 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fe74 	bl	80018b8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1f3      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1c7      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4937      	ldr	r1, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x244>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fe2d 	bl	80018b8 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fe29 	bl	80018b8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1a8      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4925      	ldr	r1, [pc, #148]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x244>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fe0c 	bl	80018b8 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fe08 	bl	80018b8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e187      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d036      	beq.n	8001d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_RCC_OscConfig+0x248>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fdec 	bl	80018b8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fde8 	bl	80018b8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e167      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001d02:	e01b      	b.n	8001d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_OscConfig+0x248>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fdd5 	bl	80018b8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff fdd1 	bl	80018b8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d907      	bls.n	8001d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e150      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470000 	.word	0x42470000
 8001d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ea      	bne.n	8001d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8097 	beq.w	8001e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b81      	ldr	r3, [pc, #516]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a7c      	ldr	r2, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b77      	ldr	r3, [pc, #476]	; (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b74      	ldr	r3, [pc, #464]	; (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a73      	ldr	r2, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fd91 	bl	80018b8 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff fd8d 	bl	80018b8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e10c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x2ea>
 8001dc0:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x324>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x30c>
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a5e      	ldr	r2, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
 8001de2:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0x324>
 8001df0:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d015      	beq.n	8001e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff fd52 	bl	80018b8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7ff fd4e 	bl	80018b8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0cb      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ee      	beq.n	8001e18 <HAL_RCC_OscConfig+0x334>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fd3c 	bl	80018b8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff fd38 	bl	80018b8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0b5      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ee      	bne.n	8001e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a1 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d05c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d141      	bne.n	8001f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fd0c 	bl	80018b8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fd08 	bl	80018b8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	491b      	ldr	r1, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fce1 	bl	80018b8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fcdd 	bl	80018b8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e05c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x416>
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fcca 	bl	80018b8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fcc6 	bl	80018b8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e045      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x444>
 8001f46:	e03d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e038      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff fbf8 	bl	80018b8 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fbf4 	bl	80018b8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fb58 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	08003070 	.word	0x08003070
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b090      	sub	sp, #64	; 0x40
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80a1 	bhi.w	800230c <HAL_RCC_GetSysClockFreq+0x16c>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e09b      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021d8:	e09b      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021de:	e098      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b4f      	ldr	r3, [pc, #316]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	2200      	movs	r2, #0
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	627a      	str	r2, [r7, #36]	; 0x24
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002208:	2100      	movs	r1, #0
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800220c:	fb03 f201 	mul.w	r2, r3, r1
 8002210:	2300      	movs	r3, #0
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	4413      	add	r3, r2
 8002218:	4a43      	ldr	r2, [pc, #268]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800221a:	fba0 1202 	umull	r1, r2, r0, r2
 800221e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002220:	460a      	mov	r2, r1
 8002222:	62ba      	str	r2, [r7, #40]	; 0x28
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002226:	4413      	add	r3, r2
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	2200      	movs	r2, #0
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002236:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800223a:	f7fd ffc5 	bl	80001c8 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4613      	mov	r3, r2
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002246:	e053      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	2200      	movs	r2, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	617a      	str	r2, [r7, #20]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800225a:	f04f 0b00 	mov.w	fp, #0
 800225e:	4652      	mov	r2, sl
 8002260:	465b      	mov	r3, fp
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ebb2 080a 	subs.w	r8, r2, sl
 800227a:	eb63 090b 	sbc.w	r9, r3, fp
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800228a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800228e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002292:	ebb2 0408 	subs.w	r4, r2, r8
 8002296:	eb63 0509 	sbc.w	r5, r3, r9
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	00eb      	lsls	r3, r5, #3
 80022a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	eb14 030a 	adds.w	r3, r4, sl
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	eb45 030b 	adc.w	r3, r5, fp
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c6:	4629      	mov	r1, r5
 80022c8:	028b      	lsls	r3, r1, #10
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d0:	4621      	mov	r1, r4
 80022d2:	028a      	lsls	r2, r1, #10
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	2200      	movs	r2, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e4:	f7fd ff70 	bl	80001c8 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002314:	4618      	mov	r0, r3
 8002316:	3740      	adds	r7, #64	; 0x40
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	017d7840 	.word	0x017d7840

0800232c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	613b      	str	r3, [r7, #16]
  return result;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2103      	movs	r1, #3
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	61bb      	str	r3, [r7, #24]
  return result;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	605a      	str	r2, [r3, #4]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b089      	sub	sp, #36	; 0x24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	613b      	str	r3, [r7, #16]
  return result;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2103      	movs	r1, #3
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	61bb      	str	r3, [r7, #24]
  return result;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	613b      	str	r3, [r7, #16]
  return result;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2103      	movs	r1, #3
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	61bb      	str	r3, [r7, #24]
  return result;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	60da      	str	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002476:	b480      	push	{r7}
 8002478:	b089      	sub	sp, #36	; 0x24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	613b      	str	r3, [r7, #16]
  return result;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	210f      	movs	r1, #15
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	61bb      	str	r3, [r7, #24]
  return result;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	431a      	orrs	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80024c8:	bf00      	nop
 80024ca:	3724      	adds	r7, #36	; 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	613b      	str	r3, [r7, #16]
  return result;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	210f      	movs	r1, #15
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	401a      	ands	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	61bb      	str	r3, [r7, #24]
  return result;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	613b      	str	r3, [r7, #16]
  return result;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002560:	e050      	b.n	8002604 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d042      	beq.n	80025fe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d003      	beq.n	8002588 <LL_GPIO_Init+0x52>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d10d      	bne.n	80025a4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	461a      	mov	r2, r3
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff12 	bl	80023ba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fef3 	bl	800238a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	461a      	mov	r2, r3
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff33 	bl	8002418 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d11a      	bne.n	80025f0 <LL_GPIO_Init+0xba>
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	60bb      	str	r3, [r7, #8]
  return result;
 80025c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b07      	cmp	r3, #7
 80025d0:	d807      	bhi.n	80025e2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	461a      	mov	r2, r3
 80025d8:	69b9      	ldr	r1, [r7, #24]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff4b 	bl	8002476 <LL_GPIO_SetAFPin_0_7>
 80025e0:	e006      	b.n	80025f0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	461a      	mov	r2, r3
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff72 	bl	80024d4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	461a      	mov	r2, r3
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff fe97 	bl	800232c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1a7      	bne.n	8002562 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <LL_RCC_GetSysClkSource+0x18>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <LL_RCC_GetAHBPrescaler+0x18>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800

08002654 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <LL_RCC_GetAPB1Prescaler+0x18>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <LL_RCC_PLL_GetN+0x18>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40023800 	.word	0x40023800

080026c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <LL_RCC_PLL_GetP+0x18>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <LL_RCC_PLL_GetDivider+0x18>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002704:	f000 f820 	bl	8002748 <RCC_GetSystemClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f840 	bl	8002798 <RCC_GetHCLKClockFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f84e 	bl	80027c4 <RCC_GetPCLK1ClockFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f85a 	bl	80027ec <RCC_GetPCLK2ClockFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002752:	f7ff ff63 	bl	800261c <LL_RCC_GetSysClkSource>
 8002756:	4603      	mov	r3, r0
 8002758:	2b08      	cmp	r3, #8
 800275a:	d00c      	beq.n	8002776 <RCC_GetSystemClockFreq+0x2e>
 800275c:	2b08      	cmp	r3, #8
 800275e:	d80f      	bhi.n	8002780 <RCC_GetSystemClockFreq+0x38>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <RCC_GetSystemClockFreq+0x22>
 8002764:	2b04      	cmp	r3, #4
 8002766:	d003      	beq.n	8002770 <RCC_GetSystemClockFreq+0x28>
 8002768:	e00a      	b.n	8002780 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <RCC_GetSystemClockFreq+0x48>)
 800276c:	607b      	str	r3, [r7, #4]
      break;
 800276e:	e00a      	b.n	8002786 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <RCC_GetSystemClockFreq+0x4c>)
 8002772:	607b      	str	r3, [r7, #4]
      break;
 8002774:	e007      	b.n	8002786 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002776:	2008      	movs	r0, #8
 8002778:	f000 f84c 	bl	8002814 <RCC_PLL_GetFreqDomain_SYS>
 800277c:	6078      	str	r0, [r7, #4]
      break;
 800277e:	e002      	b.n	8002786 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <RCC_GetSystemClockFreq+0x48>)
 8002782:	607b      	str	r3, [r7, #4]
      break;
 8002784:	bf00      	nop
  }

  return frequency;
 8002786:	687b      	ldr	r3, [r7, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	00f42400 	.word	0x00f42400
 8002794:	017d7840 	.word	0x017d7840

08002798 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027a0:	f7ff ff4a 	bl	8002638 <LL_RCC_GetAHBPrescaler>
 80027a4:	4603      	mov	r3, r0
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <RCC_GetHCLKClockFreq+0x28>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	461a      	mov	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	40d3      	lsrs	r3, r2
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	08003070 	.word	0x08003070

080027c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027cc:	f7ff ff42 	bl	8002654 <LL_RCC_GetAPB1Prescaler>
 80027d0:	4603      	mov	r3, r0
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <RCC_GetPCLK1ClockFreq+0x24>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	40d3      	lsrs	r3, r2
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	08003080 	.word	0x08003080

080027ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80027f4:	f7ff ff3c 	bl	8002670 <LL_RCC_GetAPB2Prescaler>
 80027f8:	4603      	mov	r3, r0
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <RCC_GetPCLK2ClockFreq+0x24>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	40d3      	lsrs	r3, r2
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08003080 	.word	0x08003080

08002814 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002828:	f7ff ff30 	bl	800268c <LL_RCC_PLL_GetMainSource>
 800282c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d003      	beq.n	8002844 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800283c:	e005      	b.n	800284a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002840:	617b      	str	r3, [r7, #20]
      break;
 8002842:	e005      	b.n	8002850 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002846:	617b      	str	r3, [r7, #20]
      break;
 8002848:	e002      	b.n	8002850 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d113      	bne.n	800287e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002856:	f7ff ff43 	bl	80026e0 <LL_RCC_PLL_GetDivider>
 800285a:	4602      	mov	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002862:	f7ff ff21 	bl	80026a8 <LL_RCC_PLL_GetN>
 8002866:	4603      	mov	r3, r0
 8002868:	fb03 f404 	mul.w	r4, r3, r4
 800286c:	f7ff ff2a 	bl	80026c4 <LL_RCC_PLL_GetP>
 8002870:	4603      	mov	r3, r0
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	3301      	adds	r3, #1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fbb4 f3f3 	udiv	r3, r4, r3
 800287c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800287e:	693b      	ldr	r3, [r7, #16]
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	00f42400 	.word	0x00f42400
 800288c:	017d7840 	.word	0x017d7840

08002890 <LL_USART_IsEnabled>:
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_USART_SetStopBitsLength>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_USART_SetHWFlowCtrl>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_USART_SetBaudRate>:
{
 8002904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002908:	b0c0      	sub	sp, #256	; 0x100
 800290a:	af00      	add	r7, sp, #0
 800290c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002910:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002914:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002918:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002924:	f040 810c 	bne.w	8002b40 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002928:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	6639      	str	r1, [r7, #96]	; 0x60
 8002942:	415b      	adcs	r3, r3
 8002944:	667b      	str	r3, [r7, #100]	; 0x64
 8002946:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800294a:	4621      	mov	r1, r4
 800294c:	eb12 0801 	adds.w	r8, r2, r1
 8002950:	4629      	mov	r1, r5
 8002952:	eb43 0901 	adc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002982:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002986:	2200      	movs	r2, #0
 8002988:	469a      	mov	sl, r3
 800298a:	4693      	mov	fp, r2
 800298c:	eb1a 030a 	adds.w	r3, sl, sl
 8002990:	65bb      	str	r3, [r7, #88]	; 0x58
 8002992:	eb4b 030b 	adc.w	r3, fp, fp
 8002996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002998:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800299c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029a0:	f7fd fc12 	bl	80001c8 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <LL_USART_SetBaudRate+0x238>)
 80029aa:	fba3 2302 	umull	r2, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	b29c      	uxth	r4, r3
 80029b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029c4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	6539      	str	r1, [r7, #80]	; 0x50
 80029d0:	415b      	adcs	r3, r3
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
 80029d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a22:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002a26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	18db      	adds	r3, r3, r3
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a30:	4613      	mov	r3, r2
 8002a32:	eb42 0303 	adc.w	r3, r2, r3
 8002a36:	647b      	str	r3, [r7, #68]	; 0x44
 8002a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002a40:	f7fd fbc2 	bl	80001c8 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <LL_USART_SetBaudRate+0x238>)
 8002a4c:	fba3 2301 	umull	r2, r3, r3, r1
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2264      	movs	r2, #100	; 0x64
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	1acb      	subs	r3, r1, r3
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <LL_USART_SetBaudRate+0x238>)
 8002a62:	fba3 2302 	umull	r2, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4423      	add	r3, r4
 8002a76:	b29c      	uxth	r4, r3
 8002a78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a82:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a86:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a92:	415b      	adcs	r3, r3
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	1851      	adds	r1, r2, r1
 8002a9e:	6339      	str	r1, [r7, #48]	; 0x30
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	414b      	adcs	r3, r1
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	00cb      	lsls	r3, r1, #3
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abc:	4651      	mov	r1, sl
 8002abe:	00ca      	lsls	r2, r1, #3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	eb42 0303 	adc.w	r3, r2, r3
 8002ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ada:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ae4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002ae8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002aec:	460b      	mov	r3, r1
 8002aee:	18db      	adds	r3, r3, r3
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	4613      	mov	r3, r2
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002b02:	f7fd fb61 	bl	80001c8 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <LL_USART_SetBaudRate+0x238>)
 8002b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2164      	movs	r1, #100	; 0x64
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	3332      	adds	r3, #50	; 0x32
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <LL_USART_SetBaudRate+0x238>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4423      	add	r3, r4
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	609a      	str	r2, [r3, #8]
}
 8002b3a:	e107      	b.n	8002d4c <LL_USART_SetBaudRate+0x448>
 8002b3c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b4a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	6239      	str	r1, [r7, #32]
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b62:	4641      	mov	r1, r8
 8002b64:	1854      	adds	r4, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b88:	464b      	mov	r3, r9
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002bac:	4629      	mov	r1, r5
 8002bae:	008b      	lsls	r3, r1, #2
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	008a      	lsls	r2, r1, #2
 8002bba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002bbe:	f7fd fb03 	bl	80001c8 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4b64      	ldr	r3, [pc, #400]	; (8002d58 <LL_USART_SetBaudRate+0x454>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002be2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002be6:	4642      	mov	r2, r8
 8002be8:	464b      	mov	r3, r9
 8002bea:	1891      	adds	r1, r2, r2
 8002bec:	61b9      	str	r1, [r7, #24]
 8002bee:	415b      	adcs	r3, r3
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	1851      	adds	r1, r2, r1
 8002bfa:	6139      	str	r1, [r7, #16]
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	414b      	adcs	r3, r1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0e:	4659      	mov	r1, fp
 8002c10:	00cb      	lsls	r3, r1, #3
 8002c12:	4651      	mov	r1, sl
 8002c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c18:	4651      	mov	r1, sl
 8002c1a:	00ca      	lsls	r2, r1, #3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	4642      	mov	r2, r8
 8002c24:	189b      	adds	r3, r3, r2
 8002c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	eb42 0303 	adc.w	r3, r2, r3
 8002c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002c50:	4649      	mov	r1, r9
 8002c52:	008b      	lsls	r3, r1, #2
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	008a      	lsls	r2, r1, #2
 8002c5e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002c62:	f7fd fab1 	bl	80001c8 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <LL_USART_SetBaudRate+0x454>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	; 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	3332      	adds	r3, #50	; 0x32
 8002c7e:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <LL_USART_SetBaudRate+0x454>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4423      	add	r3, r4
 8002c90:	b29c      	uxth	r4, r3
 8002c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c96:	2200      	movs	r2, #0
 8002c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	1891      	adds	r1, r2, r2
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	415b      	adcs	r3, r3
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	1851      	adds	r1, r2, r1
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	414b      	adcs	r3, r1
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	00cb      	lsls	r3, r1, #3
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	00ca      	lsls	r2, r1, #3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4642      	mov	r2, r8
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	eb42 0303 	adc.w	r3, r2, r3
 8002cea:	677b      	str	r3, [r7, #116]	; 0x74
 8002cec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002d02:	4649      	mov	r1, r9
 8002d04:	008b      	lsls	r3, r1, #2
 8002d06:	4641      	mov	r1, r8
 8002d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	008a      	lsls	r2, r1, #2
 8002d10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d14:	f7fd fa58 	bl	80001c8 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <LL_USART_SetBaudRate+0x454>)
 8002d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2164      	movs	r1, #100	; 0x64
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <LL_USART_SetBaudRate+0x454>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4423      	add	r3, r4
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d58:	51eb851f 	.word	0x51eb851f

08002d5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fd8e 	bl	8002890 <LL_USART_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d15e      	bne.n	8002e38 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d82:	f023 030c 	bic.w	r3, r3, #12
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6851      	ldr	r1, [r2, #4]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6912      	ldr	r2, [r2, #16]
 8002d94:	4311      	orrs	r1, r2
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	6992      	ldr	r2, [r2, #24]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fd85 	bl	80028b8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fd92 	bl	80028de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002dba:	f107 0308 	add.w	r3, r7, #8
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc9c 	bl	80026fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <LL_USART_Init+0xe8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d102      	bne.n	8002dd2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e021      	b.n	8002e16 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <LL_USART_Init+0xec>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d102      	bne.n	8002de0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e01a      	b.n	8002e16 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <LL_USART_Init+0xf0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e013      	b.n	8002e16 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <LL_USART_Init+0xf4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d102      	bne.n	8002dfc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e00c      	b.n	8002e16 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <LL_USART_Init+0xf8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d102      	bne.n	8002e0a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e005      	b.n	8002e16 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <LL_USART_Init+0xfc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fd66 	bl	8002904 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40011000 	.word	0x40011000
 8002e48:	40004400 	.word	0x40004400
 8002e4c:	40004800 	.word	0x40004800
 8002e50:	40011400 	.word	0x40011400
 8002e54:	40004c00 	.word	0x40004c00
 8002e58:	40005000 	.word	0x40005000

08002e5c <__errno>:
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <__errno+0x8>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000000c 	.word	0x2000000c

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	2600      	movs	r6, #0
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	4d0b      	ldr	r5, [pc, #44]	; (8002ea8 <__libc_init_array+0x40>)
 8002e7a:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <__libc_init_array+0x44>)
 8002e7c:	f000 f8e8 	bl	8003050 <_init>
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	2600      	movs	r6, #0
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08003098 	.word	0x08003098
 8002ea4:	08003098 	.word	0x08003098
 8002ea8:	08003098 	.word	0x08003098
 8002eac:	0800309c 	.word	0x0800309c

08002eb0 <malloc>:
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <malloc+0xc>)
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	f000 b839 	b.w	8002f2c <_malloc_r>
 8002eba:	bf00      	nop
 8002ebc:	2000000c 	.word	0x2000000c

08002ec0 <memcpy>:
 8002ec0:	440a      	add	r2, r1
 8002ec2:	4291      	cmp	r1, r2
 8002ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002ec8:	d100      	bne.n	8002ecc <memcpy+0xc>
 8002eca:	4770      	bx	lr
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ed6:	4291      	cmp	r1, r2
 8002ed8:	d1f9      	bne.n	8002ece <memcpy+0xe>
 8002eda:	bd10      	pop	{r4, pc}

08002edc <memset>:
 8002edc:	4402      	add	r2, r0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <sbrk_aligned>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4e0e      	ldr	r6, [pc, #56]	; (8002f28 <sbrk_aligned+0x3c>)
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	6831      	ldr	r1, [r6, #0]
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	b911      	cbnz	r1, 8002efe <sbrk_aligned+0x12>
 8002ef8:	f000 f88c 	bl	8003014 <_sbrk_r>
 8002efc:	6030      	str	r0, [r6, #0]
 8002efe:	4621      	mov	r1, r4
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 f887 	bl	8003014 <_sbrk_r>
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	d00a      	beq.n	8002f20 <sbrk_aligned+0x34>
 8002f0a:	1cc4      	adds	r4, r0, #3
 8002f0c:	f024 0403 	bic.w	r4, r4, #3
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	d007      	beq.n	8002f24 <sbrk_aligned+0x38>
 8002f14:	1a21      	subs	r1, r4, r0
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 f87c 	bl	8003014 <_sbrk_r>
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d101      	bne.n	8002f24 <sbrk_aligned+0x38>
 8002f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f24:	4620      	mov	r0, r4
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	200000b8 	.word	0x200000b8

08002f2c <_malloc_r>:
 8002f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f30:	1ccd      	adds	r5, r1, #3
 8002f32:	f025 0503 	bic.w	r5, r5, #3
 8002f36:	3508      	adds	r5, #8
 8002f38:	2d0c      	cmp	r5, #12
 8002f3a:	bf38      	it	cc
 8002f3c:	250c      	movcc	r5, #12
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	4607      	mov	r7, r0
 8002f42:	db01      	blt.n	8002f48 <_malloc_r+0x1c>
 8002f44:	42a9      	cmp	r1, r5
 8002f46:	d905      	bls.n	8002f54 <_malloc_r+0x28>
 8002f48:	230c      	movs	r3, #12
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	2600      	movs	r6, #0
 8002f4e:	4630      	mov	r0, r6
 8002f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f54:	4e2e      	ldr	r6, [pc, #184]	; (8003010 <_malloc_r+0xe4>)
 8002f56:	f000 f86d 	bl	8003034 <__malloc_lock>
 8002f5a:	6833      	ldr	r3, [r6, #0]
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	bb34      	cbnz	r4, 8002fae <_malloc_r+0x82>
 8002f60:	4629      	mov	r1, r5
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ffc2 	bl	8002eec <sbrk_aligned>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	d14d      	bne.n	800300a <_malloc_r+0xde>
 8002f6e:	6834      	ldr	r4, [r6, #0]
 8002f70:	4626      	mov	r6, r4
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d140      	bne.n	8002ff8 <_malloc_r+0xcc>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	4631      	mov	r1, r6
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	eb04 0803 	add.w	r8, r4, r3
 8002f80:	f000 f848 	bl	8003014 <_sbrk_r>
 8002f84:	4580      	cmp	r8, r0
 8002f86:	d13a      	bne.n	8002ffe <_malloc_r+0xd2>
 8002f88:	6821      	ldr	r1, [r4, #0]
 8002f8a:	3503      	adds	r5, #3
 8002f8c:	1a6d      	subs	r5, r5, r1
 8002f8e:	f025 0503 	bic.w	r5, r5, #3
 8002f92:	3508      	adds	r5, #8
 8002f94:	2d0c      	cmp	r5, #12
 8002f96:	bf38      	it	cc
 8002f98:	250c      	movcc	r5, #12
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	f7ff ffa5 	bl	8002eec <sbrk_aligned>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d02b      	beq.n	8002ffe <_malloc_r+0xd2>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	442b      	add	r3, r5
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	e00e      	b.n	8002fcc <_malloc_r+0xa0>
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	1b52      	subs	r2, r2, r5
 8002fb2:	d41e      	bmi.n	8002ff2 <_malloc_r+0xc6>
 8002fb4:	2a0b      	cmp	r2, #11
 8002fb6:	d916      	bls.n	8002fe6 <_malloc_r+0xba>
 8002fb8:	1961      	adds	r1, r4, r5
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	6025      	str	r5, [r4, #0]
 8002fbe:	bf18      	it	ne
 8002fc0:	6059      	strne	r1, [r3, #4]
 8002fc2:	6863      	ldr	r3, [r4, #4]
 8002fc4:	bf08      	it	eq
 8002fc6:	6031      	streq	r1, [r6, #0]
 8002fc8:	5162      	str	r2, [r4, r5]
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f104 060b 	add.w	r6, r4, #11
 8002fd2:	f000 f835 	bl	8003040 <__malloc_unlock>
 8002fd6:	f026 0607 	bic.w	r6, r6, #7
 8002fda:	1d23      	adds	r3, r4, #4
 8002fdc:	1af2      	subs	r2, r6, r3
 8002fde:	d0b6      	beq.n	8002f4e <_malloc_r+0x22>
 8002fe0:	1b9b      	subs	r3, r3, r6
 8002fe2:	50a3      	str	r3, [r4, r2]
 8002fe4:	e7b3      	b.n	8002f4e <_malloc_r+0x22>
 8002fe6:	6862      	ldr	r2, [r4, #4]
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	bf0c      	ite	eq
 8002fec:	6032      	streq	r2, [r6, #0]
 8002fee:	605a      	strne	r2, [r3, #4]
 8002ff0:	e7ec      	b.n	8002fcc <_malloc_r+0xa0>
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	6864      	ldr	r4, [r4, #4]
 8002ff6:	e7b2      	b.n	8002f5e <_malloc_r+0x32>
 8002ff8:	4634      	mov	r4, r6
 8002ffa:	6876      	ldr	r6, [r6, #4]
 8002ffc:	e7b9      	b.n	8002f72 <_malloc_r+0x46>
 8002ffe:	230c      	movs	r3, #12
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4638      	mov	r0, r7
 8003004:	f000 f81c 	bl	8003040 <__malloc_unlock>
 8003008:	e7a1      	b.n	8002f4e <_malloc_r+0x22>
 800300a:	6025      	str	r5, [r4, #0]
 800300c:	e7de      	b.n	8002fcc <_malloc_r+0xa0>
 800300e:	bf00      	nop
 8003010:	200000b4 	.word	0x200000b4

08003014 <_sbrk_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4d06      	ldr	r5, [pc, #24]	; (8003030 <_sbrk_r+0x1c>)
 8003018:	2300      	movs	r3, #0
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fd fe82 	bl	8000d28 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_sbrk_r+0x1a>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_sbrk_r+0x1a>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	200000bc 	.word	0x200000bc

08003034 <__malloc_lock>:
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <__malloc_lock+0x8>)
 8003036:	f000 b809 	b.w	800304c <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	200000c0 	.word	0x200000c0

08003040 <__malloc_unlock>:
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <__malloc_unlock+0x8>)
 8003042:	f000 b804 	b.w	800304e <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	200000c0 	.word	0x200000c0

0800304c <__retarget_lock_acquire_recursive>:
 800304c:	4770      	bx	lr

0800304e <__retarget_lock_release_recursive>:
 800304e:	4770      	bx	lr

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
